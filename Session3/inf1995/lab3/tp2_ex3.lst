GAS LISTING /tmp/ccXCi0Le.s 			page 1


   1               		.file	"tp2_ex3.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/usagers/damaib/Documents/Session3/inf1995/lab3/",100,0,4,.Ltext0
   8               		.stabs	"tp2_ex3.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"void:t(0,4)",128,0,0,0
  38               		.stabs	"wchar_t:t(0,23)=r(0,23);-32768;32767;",128,0,0,0
  39               		.stabs	"bool:t(0,24)=@s8;-16;",128,0,0,0
  40               		.stabs	"__vtbl_ptr_type:t(0,25)=*(0,26)=f(0,9)",128,0,0,0
  41               		.stabs	"decltype(nullptr):t(0,27)=(0,27)",128,0,0,0
  42               		.stabs	"int8_t:t(0,28)=(0,16)",128,0,121,0
  43               		.stabs	"uint8_t:t(0,29)=(0,13)",128,0,122,0
  44               		.stabs	"int16_t:t(0,30)=(0,9)",128,0,123,0
  45               		.stabs	"uint16_t:t(0,31)=(0,12)",128,0,124,0
  46               		.stabs	"int32_t:t(0,32)=(0,15)",128,0,125,0
  47               		.stabs	"uint32_t:t(0,33)=(0,11)",128,0,126,0
  48               		.stabs	"int64_t:t(0,34)=(0,14)",128,0,128,0
  49               		.stabs	"uint64_t:t(0,35)=(0,10)",128,0,129,0
  50               		.stabs	"intptr_t:t(0,36)=(0,30)",128,0,142,0
  51               		.stabs	"uintptr_t:t(0,37)=(0,31)",128,0,147,0
  52               		.stabs	"int_least8_t:t(0,38)=(0,28)",128,0,159,0
  53               		.stabs	"uint_least8_t:t(0,39)=(0,29)",128,0,164,0
  54               		.stabs	"int_least16_t:t(0,40)=(0,30)",128,0,169,0
  55               		.stabs	"uint_least16_t:t(0,41)=(0,31)",128,0,174,0
  56               		.stabs	"int_least32_t:t(0,42)=(0,32)",128,0,179,0
  57               		.stabs	"uint_least32_t:t(0,43)=(0,33)",128,0,184,0
GAS LISTING /tmp/ccXCi0Le.s 			page 2


  58               		.stabs	"int_least64_t:t(0,44)=(0,34)",128,0,192,0
  59               		.stabs	"uint_least64_t:t(0,45)=(0,35)",128,0,199,0
  60               		.stabs	"int_fast8_t:t(0,46)=(0,28)",128,0,213,0
  61               		.stabs	"uint_fast8_t:t(0,47)=(0,29)",128,0,218,0
  62               		.stabs	"int_fast16_t:t(0,48)=(0,30)",128,0,223,0
  63               		.stabs	"uint_fast16_t:t(0,49)=(0,31)",128,0,228,0
  64               		.stabs	"int_fast32_t:t(0,50)=(0,32)",128,0,233,0
  65               		.stabs	"uint_fast32_t:t(0,51)=(0,33)",128,0,238,0
  66               		.stabs	"int_fast64_t:t(0,52)=(0,34)",128,0,246,0
  67               		.stabs	"uint_fast64_t:t(0,53)=(0,35)",128,0,253,0
  68               		.stabs	"intmax_t:t(0,54)=(0,34)",128,0,273,0
  69               		.stabs	"uintmax_t:t(0,55)=(0,35)",128,0,278,0
  70               		.stabs	"int_farptr_t:t(0,56)=(0,32)",128,0,77,0
  71               		.stabs	"uint_farptr_t:t(0,57)=(0,33)",128,0,81,0
  72               		.stabs	"._0:Tt(0,58)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
  73               		.stabs	"__fuse_t:t(0,58)",128,0,244,0
  74               		.section	.text.startup,"ax",@progbits
  75               		.stabs	"main:F(0,9)",36,0,19,main
  76               	.global	main
  77               		.type	main, @function
  78               	main:
  79               		.stabd	46,0,0
   1:tp2_ex3.cpp   **** /****************************************************************************
   2:tp2_ex3.cpp   ****  * Fichier: TP2_ex2.cpp
   3:tp2_ex3.cpp   ****  * Auteur: Michael Ferris
   4:tp2_ex3.cpp   ****  * Date: 11 Septembre 2013
   5:tp2_ex3.cpp   ****  * DESCRIPTION : Activation de LED ambrée avec bouton.
   6:tp2_ex3.cpp   ****  ****************************************************************************/
   7:tp2_ex3.cpp   **** 
   8:tp2_ex3.cpp   **** /* Information sur branchements */
   9:tp2_ex3.cpp   **** /* Port B0 branché sur +        */
  10:tp2_ex3.cpp   **** /* Port B1 branché sur -        */
  11:tp2_ex3.cpp   **** 
  12:tp2_ex3.cpp   **** // F_CPU permet de définir la vitesse du micro-controleur soit 8MHz
  13:tp2_ex3.cpp   **** #define F_CPU 8000000UL
  14:tp2_ex3.cpp   **** #include <avr/io.h>
  15:tp2_ex3.cpp   **** #include <util/delay.h>
  16:tp2_ex3.cpp   **** 
  17:tp2_ex3.cpp   **** #define BOUTON_ENFONCE (PIND & _BV(2))
  18:tp2_ex3.cpp   **** 
  19:tp2_ex3.cpp   **** int main()
  20:tp2_ex3.cpp   **** {
  80               		.stabn	68,0,20,.LM0-.LFBB1
  81               	.LM0:
  82               	.LFBB1:
  83               	/* prologue: function */
  84               	/* frame size = 0 */
  85               	/* stack size = 0 */
  86               	.L__stack_usage = 0
  21:tp2_ex3.cpp   ****     DDRB = 0xff; // PORT B est en mode sortie.
  87               		.stabn	68,0,21,.LM1-.LFBB1
  88               	.LM1:
  89 0000 8FEF      		ldi r24,lo8(-1)
  90 0002 84B9      		out 0x4,r24
  22:tp2_ex3.cpp   ****     DDRD = 0x0; // PORT D est en mode entrée.
  91               		.stabn	68,0,22,.LM2-.LFBB1
  92               	.LM2:
GAS LISTING /tmp/ccXCi0Le.s 			page 3


  93 0004 1AB8      		out 0xa,__zero_reg__
  23:tp2_ex3.cpp   **** 
  24:tp2_ex3.cpp   ****     // Boucle infinie
  25:tp2_ex3.cpp   ****     for(;;)
  26:tp2_ex3.cpp   ****     {
  27:tp2_ex3.cpp   ****         // LED éteinte par défaut.
  28:tp2_ex3.cpp   ****         PORTB = 0x0;
  29:tp2_ex3.cpp   **** 
  30:tp2_ex3.cpp   ****         // Verification du bouton poussoir avec anti-rebond
  31:tp2_ex3.cpp   ****         if(BOUTON_ENFONCE)
  32:tp2_ex3.cpp   ****         {
  33:tp2_ex3.cpp   ****             // Tant que le bouton est enfoncé on affiche la LED ambré
  34:tp2_ex3.cpp   ****                 PORTB = _BV(PORTB0);
  94               		.stabn	68,0,34,.LM3-.LFBB1
  95               	.LM3:
  96 0006 81E0      		ldi r24,lo8(1)
  97               	.L9:
  28:tp2_ex3.cpp   ****         PORTB = 0x0;
  98               		.stabn	68,0,28,.LM4-.LFBB1
  99               	.LM4:
 100 0008 15B8      		out 0x5,__zero_reg__
  31:tp2_ex3.cpp   ****         if(BOUTON_ENFONCE)
 101               		.stabn	68,0,31,.LM5-.LFBB1
 102               	.LM5:
 103 000a 4A9B      		sbis 0x9,2
 104 000c 00C0      		rjmp .L9
 105               		.stabn	68,0,34,.LM6-.LFBB1
 106               	.LM6:
 107 000e 85B9      		out 0x5,r24
 108               	.LBB5:
 109               	.LBB6:
 110               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h",132,0,0,.Ltext1
 111               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
   7:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
GAS LISTING /tmp/ccXCi0Le.s 			page 4


  25:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
  64:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** */
GAS LISTING /tmp/ccXCi0Le.s 			page 5


  82:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
GAS LISTING /tmp/ccXCi0Le.s 			page 6


 139:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 112               		.stabn	68,0,164,.LM7-.LFBB1
 113               	.LM7:
 114 0010 EFE3      		ldi r30,lo8(-25537)
 115 0012 FCE9      		ldi r31,hi8(-25537)
 116 0014 3197      		1: sbiw r30,1
 117 0016 01F4      		brne 1b
 118 0018 00C0      		rjmp .
 119 001a 0000      		nop
 120 001c 00C0      		rjmp .L9
 121               	.LBE6:
 122               	.LBE5:
 123               		.size	main, .-main
 124               	.Lscope1:
 125               		.stabs	"",36,0,0,.Lscope1-.LFBB1
 126               		.stabd	78,0,0
 127               		.text
 128               		.stabs	"",100,0,0,.Letext0
 129               	.Letext0:
 130               		.ident	"GCC: (Fedora 4.7.3-0.1.fc19) 4.7.3 20130216 (prerelease)"
GAS LISTING /tmp/ccXCi0Le.s 			page 7


DEFINED SYMBOLS
                            *ABS*:0000000000000000 tp2_ex3.cpp
     /tmp/ccXCi0Le.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccXCi0Le.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccXCi0Le.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccXCi0Le.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccXCi0Le.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccXCi0Le.s:78     .text.startup:0000000000000000 main

NO UNDEFINED SYMBOLS
