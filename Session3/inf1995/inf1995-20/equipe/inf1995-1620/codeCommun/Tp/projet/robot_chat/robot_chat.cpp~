/****************************************************************************
 * Fichier: robot_chat.cpp
 * Auteur: Mario Saliby(1668958) et Youssef Zemmahi(1665843) et Yannick Ouellet et David Mainville 
 * DESCRIPTION : Chat
 ****************************************************************************/

/* Information sur branchements */

/* Port A0 branché sur capteur distance*/

/* Port B0 branché sur +        DEL*/
/* Port B1 branché sur -        DEL*/
/* Port B2 branché sur module de son*/

/* Port C2 branché sur capteur ligne gauche*/
/* Port C4 branché sur capteur ligne milieu*/
/* Port C6 branché sur capteur ligne droit*/

/* Port D4 branché sur enable moteur gauche*/
/* Port D6 branché sur sens moteur gauche*/

/* Port D5 branché sur enable moteur droit*/
/* Port D7 branché sur sens moteur droit*/

#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
#include "lib/libRobot.h"
#include <avr/interrupt.h> 
#include "can.h"

#define VALEURANALOGIQUE (PINA & _BV(1))
#define BOUTON_ENFONCE (PIND & _BV(2))

//-----------------------------
//Lib et utils
//-----------------------------
LibRobot r;
volatile uint8_t& portDEL = PORTB;
uint8_t pinCouleur  = _BV(PORTB0);
uint8_t pinCouleur2  = _BV(PORTB1);

//-----------------------------
//Constantes et variables pour les décision du chat
//-----------------------------

	//-----------------------------
	//Mode de déplacement, prise de décision
	//-----------------------------
	bool modeLigneDroite;
	bool modeIntersection;
	bool modeVirageGauche;
	bool modeVirageDroite;
	bool modeReculer;

	uint8_t directionCourrante; //1 = nord, 2= est, 3 = sud, 4 = ouest
	int8_t positionRalativeX; //Nombre de case en x de la position de la souris, ex: 1 -> 1 case a l'est
	int8_t positionRalativeY; //Nombre de case en y de la position de la souris, ex: 1 -> 1 case au nord, -1 ->  case au sud
	int8_t distanceAParcourirX;
	int8_t distanceAParcourirY;

	uint16_t distance16;
	uint8_t distance8;	//Valeur sur 8 bit de la distance calculé par le capteur lors du dernier cicle

	bool modeRecherche;
	bool modeFoncer;
	bool modeVictoire;
	bool modeDetection;
	
	uint8_t vitesseFoncer;
	uint8_t modeFoncerConsecutif;
	uint8_t modeFoncerConsecutifMax;

	uint8_t vitesseVirageDetection;

	int8_t varianceVitesseVirageDetection; 			
	int8_t varianceVitesseVirageDetectionDeceleration; 	
	int8_t varianceVitesseVirageDetectionMax;		
	int8_t varianceVitesseVirageDetectionMin;
	uint8_t directionInitialeDetection;

	uint16_t delaiMemeOrientation;
	uint16_t delaiMemeOrientationMax;

	uint8_t nbIntersection;
	uint8_t nbIntersectionMax;


//-----------------------------
//Constantes et variables pour le déplacement stable
//-----------------------------

	//-----------------------------
	//Constante et variable pour virage
	//-----------------------------
	int8_t vitesseVirage;
	bool virageForce; //Si le mode détection est provoquer par le temps
	bool detecteurEnabled; 	//Est a vrai si le detecteur peut signuifier la fin d'un virage
				//Pour etre valide le détecteur doit être éteint au moins une fois pendant un virage
				//Permet d'éviter de concidèrer un ligne droite comme un tournant lors d'un virage

	int8_t varianceVitesseVirage; 			//Utiliser pour faire varier la vitesse du virage pendant le virage même, permet une vitesse plus lente de virage
	int8_t varianceVitesseVirageDeceleration; 	//Cependant étant donné que le moteur ne peut aller en dessous d'une certaine vitesse, il est important de remonter la
	int8_t varianceVitesseVirageMax;		//vitesse au maximum par moment, la vitesse ocille donc, entre vitesseVirage+varianceVitesseVirageMax et
	int8_t varianceVitesseVirageMin;		//vitesseVirage + varianceVitesseVirageMin


	//-----------------------------
	//Constante et variable pour determinerTypeIntersection
	//-----------------------------
	bool franchieGauche;
	bool franchieMilieu;
	bool franchieDroite;

	bool gaucheExiste; //On peut tourner a gauche
	bool droiteExiste;
	bool milieuExiste;

	uint16_t tempsIntersection;
	uint16_t tempsIntersectionMax; //Temps maximum pour détecter le type d'intersection
	uint16_t tempsActif;
	uint16_t seuilTempsActifToutDroit; //Temps actif minimum pour pouvoir continuer tout droit

	uint8_t dernierCapteurIntersection; //1 gauche, 2 milieu, 3 droite, 0 rien

	//-----------------------------
	//Constante et variable pour avancerLigneDroite
	//-----------------------------
	uint8_t dernierCapteur; //1 gauche, 2 milieu, 3 droite, 0 rien
	uint8_t vitesseBase;
	int8_t ajustementGauche;
	int8_t ajustementDroit;
	int8_t ajustementMax;
	int8_t ajustementMin;
	int8_t ajustementRetour; //Lorsque l'on revient au centre, aujustement pour remttre le robot droit dans le sens inverse duquel on vient
	int8_t ajustementVirageLeger; //Ajustement de la vitesse lors d'une stabilisation
	int8_t ajustementVirageMoyen;
	uint16_t delaisLigneDroite;
	uint16_t delaisMaxLigneDroite;

	int16_t delaisAjustementTemporaire;
	int8_t ajustementTemporaireG;
	int8_t ajustementTemporaireD;
	int8_t ajustementTournant;
	int8_t ajustementLigneDroite;
	uint8_t dureeAjustementTournant;
	uint8_t dureeAjustementLigneDroite;

	uint16_t tempsDepuisIntersection;
	uint16_t tempsAttenteMaxIntersection; //Temps d'attente maximal, avant de déclancher un intersection

	//-----------------------------
	//Constante et variable pour reculer
	//-----------------------------
	uint8_t vitesseReculer;
	int8_t tempsReculActif;
	int8_t tempsReculActifMax;
	bool finRecul; //Utiliser pour faire reculer un peu plus apres avoir retrouvé la ligne
	int8_t tempsReculExtra;
	int8_t tempsReculExtraMax;

	//-----------------------------
	//Constante et variable pour éviter de tomber
	//-----------------------------
	//Vérifier le % de temps actif dans un delai recent pour s'assurer qu'on n'est pas dans le vide
	//La vérification de la limite sera faite lors des déclenchement de delai max atteint
	uint16_t tempsLigneDroiteActive;
	uint16_t tempsLigneDroiteDepuisIntersection;
	uint16_t tempsLigneDroiteActiveMax;
	uint16_t tempsLigneDroiteActiveSeuil;

	//Vérification du temps sans capteur (qui est reset chaque fois qu'un capteur est atteint)
	uint16_t tempsActifSansCapteur;
	uint16_t tempsActifSansCapteurMax;

bool debug = false;

bool capteurDroit()
{
	return !(PINC & _BV(PORTC6));
}
bool capteurMilieu()
{
	return !(PINC & _BV(PORTC4));
}
bool capteurGauche()
{
	return !(PINC & _BV(PORTC2));
}

void jouerSonDistance(uint16_t valeur)
{
	if(valeur>20) 
	{	
		// Intervalles qui definissent les differents sons emis dependamment de la force du signal de retour.                                                                                     
		if (valeur>7 && valeur<=17)
			r.jouerSon(66);
		else if (valeur>17 && valeur<=33)
			r.jouerSon(67);
		else if (valeur>33 && valeur<=49)
			r.jouerSon(68);
		else if (valeur>49 && valeur<=65)
			r.jouerSon(69);
		else if (valeur>65 && valeur<=81)
			r.jouerSon(70);
		else if  (valeur>81 && valeur<=97)
			r.jouerSon(71);
		else if (valeur>97 && valeur<=113)
			r.jouerSon(72);
		else if (valeur>113 && valeur<=129)
			r.jouerSon(73);
		else if (valeur>129 && valeur<=145)
			r.jouerSon(74);
		else if  (valeur>145 && valeur<=161)
			r.jouerSon(75);
		else if (valeur>161 && valeur<=177)
			r.jouerSon(76);
		else if (valeur>177 && valeur<=193)
			r.jouerSon(77);
		else if (valeur>193 && valeur<=209)
			r.jouerSon(78);
		else if  (valeur>209 && valeur<=225)
			r.jouerSon(79);
		else if(valeur>225 && valeur<=241)
			r.jouerSon(80);
		else if (valeur>241 && valeur<256)
			r.jouerSon(81);
	}
	else
	{
		r.arreterSon();
	}
}


uint8_t getDistanceSouris()
{
	if(distance8 <= 50)
		return 4; //on ne le voit pas

	if(distance8 > 140)
		return 0; //victoire

	if(distance8 >50 && distance8<=140)
		return 2;

	return 3;
}

void ajusterPositionRelative(uint8_t axeCourrant)
{
	//Assigne une valeur a position relative X et Y

	//axe courrant : 1 = nord, 2 = est, 3 = sud, 4 = ouest, 5 = nord-est, 6 = sud-est, 7 = sud-ouest, 8 = nord-ouest
	//positionRalativeX
	//positionRalativeY

	int8_t axe_x = 0;
	int8_t axe_y = 0;

	if(distance8>50)   
	{
		switch (axeCourrant) // cas 0,1,2  , axe des x , angle , axe des y
		{
			case 1 : //Nord
			{
				if(distance8 >80 && distance8<=140)
				{
					axe_x=0;
					axe_y=2;
				}
				else if(distance8 <=80)
				{
					axe_x=0;
					axe_y=3;
				}
				break;
			}
			case 2 : //Est
			{
				if(distance8 >80 && distance8<=140)
				{
					axe_x=2;
					axe_y=0;
				}
				else if(distance8 <=80)
				{
					axe_x=3;
					axe_y=0;
				}
				break;
			}
			case 3 : //Sud
			{
				if(distance8 >80 && distance8<=140)
				{
					axe_x=0;
					axe_y=-2;
				}
				else if(distance8 <=80)
				{
					axe_x=0;
					axe_y=-3;
				}
				break;
			}
			case 4 : //Ouest
			{
				if(distance8 >80 && distance8<=140)
				{
					axe_x=-2;
					axe_y=0;
				}
				else if(distance8 <=80)
				{
					axe_x=-3;
					axe_y=0;
				}
				break;
			}
			case 5 :  //Nord-Est, diagonale d'un carre de cote=10 pouces = 14 pouces
			{
				if(distance8 <=140 && distance8 > 90)
				{
					axe_x=1;
					axe_y=1;
				}
				else if(distance8<=90)
				{
					axe_x=2;
					axe_y=2;
				}
				break;
			}
			case 6 :  //Sud-Est
			{
				if(distance8 <=140 && distance8 > 90)
				{
					axe_x=1;
					axe_y=-1;
				}
				else if(distance8<=90)
				{
					axe_x=2;
					axe_y=-2;
				}
				break;
			}
			case 7 :  //Sud-Ouest
			{
				if(distance8 <=140 && distance8 > 90)
				{
					axe_x=-1;
					axe_y=-1;
				}
				else if(distance8<=90)
				{
					axe_x=-2;
					axe_y=-2;
				}
				break;
			}
			case 8 :  //Nord-Ouest
			{
				if(distance8 <=140 && distance8 > 90)
				{
					axe_x=-1;
					axe_y=1;
				}
				else if(distance8<=90)
				{
					axe_x=-2;
					axe_y=2;
				}
				break;
			}
		}   
	}
	else
	{
		//Tres loin
		axe_x = 4;
		axe_y = 4;
	}
	
	positionRalativeX = axe_x;
	positionRalativeY = axe_y;
}


void ajusterOrientation(bool gauche)
{
	if(gauche)
	{
		directionCourrante--;
		if(directionCourrante == 0)
			directionCourrante = 4;
	}
	else
	{
		directionCourrante++;
		if(directionCourrante == 5)
			directionCourrante = 1;
	}
}

void ajusterFranchie()//Ajuste les variables de franchissement
{
	if(capteurGauche())
		franchieGauche = true;
	if(capteurMilieu())
		franchieMilieu = true;
	if(capteurDroit())
		franchieDroite = true;
}

void ajusterPossibiliteIntersection()//Ajuste les variables de tournant possible
{
	
	//La gauche et la droite sont disponible si ils le sont en même temps que le milieu
	//Sauf dans les cas ou l'on est décallé du côté inverse (autrement dit, si l'on est décallé a droite et qu'on
	//	 a le capteur milieu et le capteur gauche, on ne peut rien conclure)
	if(capteurMilieu() && dernierCapteurIntersection == 2)
	{
		if(capteurGauche())
			gaucheExiste = true;
		if(capteurDroit())
			droiteExiste = true;
	}


	if(dernierCapteurIntersection == 1) //On est a droite de la ligne, puisque le dernier capteur est le gauche
	{
		//Lorsqu'on est déja décallé a droite, le simple fait d'activer le capteut droit signifie que l'on peut y tourner
		if(capteurDroit())
			droiteExiste = true;

		//Pour pouvoir déterminer si le milieu existe, 
	}
	else if(dernierCapteurIntersection == 3)//On est a gauche de la ligne
	{
		//Lorsqu'on est déja décallé a gauche, le simple fait d'activer le capteut gauche signifie que l'on peut y tourner
		if(capteurGauche())
			gaucheExiste = true;
	}
}


bool detecterIntersection() //Return true si une intersection est trouvé
{
	return (capteurMilieu() && (capteurGauche() || capteurDroit()));
}

bool perdue()
{
	return (!capteurDroit() && !capteurMilieu() && !capteurGauche());
}

void tomberEnModeDetection()
{
	modeDetection = true;
	modeLigneDroite = false;

	varianceVitesseVirageDetection = 0;
	directionInitialeDetection = directionCourrante;
}

void tomberEnModerDetecterTypeIntersection(bool force) //bool force, détermine si on est en détection d'intersection force par la minuterie
{
	virageForce = force;
	tempsDepuisIntersection = 0;
	tempsLigneDroiteActive = 0;
	tempsLigneDroiteDepuisIntersection = 0;
	tempsActifSansCapteur = 0;
	varianceVitesseVirage = 0;
	
	//Changer en mode Trouver intersection
	modeLigneDroite = false;
	modeIntersection = true;

	franchieGauche = false;
	franchieMilieu = false;
	franchieDroite = false;

	gaucheExiste = false;
	droiteExiste = false;
	milieuExiste = false;

	tempsIntersection = 0;
	tempsActif = 0;
	dernierCapteurIntersection = dernierCapteur;
}

bool determinerTypeIntersection() //return true si le type est trouvé, false sinon
{
	if(milieuExiste && modeFoncer) //Si on est en mode foncer et que le milieu existe on choisit le milieu immédiatement
	{
		droiteExiste = false;
		gaucheExiste = false;
		return true;
	}

	//Vérifier si on passe en mode detecter intersection normale
	if(virageForce && detecterIntersection()) //Dans quel cas, on retourne en mode detecter intersection avec le delai remit a 0
	{
		//Reseter la détection d'intersection
		tomberEnModerDetecterTypeIntersection(false);		
	}

	tempsIntersection += 10;
	if(!perdue())	//Si au moins 1 capteurs actif augmenter le temps actif
		tempsActif +=10;

	if(tempsActif >= seuilTempsActifToutDroit)
		milieuExiste = true;

	//Si au moins la moitié du temps a été passé, qu'on est en virage forcé, qu'aucun capteur est allumé et que le temps actif est très faible, 
	//prendre une décision tout de suite
	if(perdue() && tempsActif < 120 && tempsIntersection > tempsIntersectionMax>>1 && virageForce)
	{
		//Ici on recule peu importe, étant donné qu'aucune intersection n'a été détecté, sans quoi on serait tomber en mode detecter non forcé
		franchieDroite = false;
		franchieGauche = false;
		franchieMilieu = false;
		return true;
	}

	if(tempsIntersection >= tempsIntersectionMax) //Le temps est écoulé, prendre une decision
	{

		if(!franchieDroite)
		{	
			droiteExiste = false;
			gaucheExiste = true;
		}
		else if(!franchieGauche)
		{	
			droiteExiste = true;
			gaucheExiste = false;
		}

		return true;
	}

	if(gaucheExiste && milieuExiste && droiteExiste)//Si tous le type d'intersection sont permis, arrêter de vérifier les types d'intersection
	{
		return true;
	}

	ajusterFranchie();
	ajusterPossibiliteIntersection();

	return false;
}

void ajusterDernierCapteur()
{
	if(capteurDroit())
		dernierCapteur = 3;
	if(capteurMilieu())
		dernierCapteur = 2;
	if(capteurGauche())
		dernierCapteur = 1;	
}

void limiterAjustement()
{
	if(ajustementGauche > ajustementMax)
		ajustementGauche = ajustementMax;
	if(ajustementDroit > ajustementMax)
		ajustementDroit = ajustementMax;

	if(ajustementGauche < ajustementMin)
		ajustementGauche = ajustementMin;
	if(ajustementDroit < ajustementMin)
		ajustementDroit = ajustementMin;
}

void ajustementVitesse(bool sens)
{
	delaisLigneDroite++;
	if(delaisLigneDroite >= delaisMaxLigneDroite)
	{
		delaisLigneDroite = 0;
		if(sens)
		{
			ajustementGauche++;
			ajustementDroit--;
			limiterAjustement();
		}
		else
		{
			ajustementGauche--;
			ajustementDroit++;
			limiterAjustement();
		}
	}
}

void avancerAvecAjustement(int16_t vG, int16_t vD)
{
	if(delaisAjustementTemporaire > 0)
	{
		r.avancer(vG,vD,ajustementGauche+ajustementTemporaireG, ajustementDroit+ajustementTemporaireD);
	}
	else
	{
		r.avancer(vG,vD,ajustementGauche, ajustementDroit);
	}
}

void reculerAvecAjustement(int16_t vG, int16_t vD)
{
	if(dernierCapteur == 1) 					//gauche, donc on tourne vers la gauche en reculant
		r.reculer(vG,0,ajustementGauche, ajustementDroit);
	else if(dernierCapteur == 3) 					//droite
		r.reculer(vG,0,ajustementGauche, ajustementDroit);
	else								//milieu
		r.reculer(vG,vD,ajustementGauche, ajustementDroit);
}

void viragePourLigneDroite(bool sens, int8_t ajustementVitesseVirage)//false gauche, true droite
{
	if(sens)//Droite
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(true);
		if(modeFoncer)
			avancerAvecAjustement(vitesseFoncer + ajustementVitesseVirage, vitesseFoncer - ajustementVitesseVirage);
		else
			avancerAvecAjustement(vitesseBase + ajustementVitesseVirage, vitesseBase - ajustementVitesseVirage);
	}
	else//Gauche
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(false);
		if(modeFoncer)
			avancerAvecAjustement(vitesseFoncer - ajustementVitesseVirage, vitesseFoncer + ajustementVitesseVirage);
		else
			avancerAvecAjustement(vitesseBase - ajustementVitesseVirage, vitesseBase + ajustementVitesseVirage);
	}
}

void tomberEnModeReculer()
{
	tempsReculActif = 0;
	finRecul = false;
	tempsReculExtra = 0;
	modeReculer = true;
	r.decoincer(true, true, false);
}

bool directionConvient(uint8_t choix) //int choix : 1 gauche, 2 = milieu, 3 = droite
{
	//True si le choix de direction convient avec la distanceAParcourir en concidérant l'orientation
	if(distanceAParcourirX == 4 && distanceAParcourirY ==4)
		return false;

	if(choix == 1)//On veut aller a gauche
	{
		if(directionCourrante == 1) //Nord
		{
			return (distanceAParcourirX < 0);
		}
		if(directionCourrante == 2) //Est
		{
			return (distanceAParcourirY > 0 && distanceAParcourirY !=4);
		}
		if(directionCourrante == 3) //Sud
		{
			return (distanceAParcourirX > 0 && distanceAParcourirX !=4);
		}
		if(directionCourrante == 4) //Ouest
		{
			return (distanceAParcourirY < 0);
		}
	}
	if(choix == 2)//On veut aller tout droit
	{
		if(directionCourrante == 1) //Nord
		{
			return (distanceAParcourirY > 0 && distanceAParcourirY !=4);
		}
		if(directionCourrante == 2) //Est
		{
			return (distanceAParcourirX > 0 && distanceAParcourirX !=4);
		}
		if(directionCourrante == 3) //Sud
		{
			return (distanceAParcourirY < 0);
		}
		if(directionCourrante == 4) //Ouest
		{
			return (distanceAParcourirX < 0);
		}
	}
	if(choix == 3)//On veut aller a droite
	{
		if(directionCourrante == 1) //Nord
		{
			return (distanceAParcourirX > 0 && distanceAParcourirX !=4);
		}
		if(directionCourrante == 2) //Est
		{
			return (distanceAParcourirY < 0);
		}
		if(directionCourrante == 3) //Sud
		{
			return (distanceAParcourirX < 0);
		}
		if(directionCourrante == 4) //Ouest
		{
			return (distanceAParcourirY > 0 && distanceAParcourirY !=4);
		}
	}
	return false;
}

void nullifierDistanceAParcourir()
{
	distanceAParcourirX = 4;
	distanceAParcourirY = 4;
}

void decisionVirage(bool gaucheForce, bool droiteForce) //Les propriétées détermine si la gauche ou la droite est forcée
{
	//--------------------------------
	//Cas évident, rien ou 1 seul choix
	//--------------------------------

	//Si rien n'existe, tomber en mode reculer
	if(!droiteExiste && !milieuExiste && !gaucheExiste)
	{
		tomberEnModeReculer();
		nullifierDistanceAParcourir();
		return;
	}
	if(!droiteExiste && !milieuExiste && gaucheExiste) //gauche
	{
		if(modeRecherche && !directionConvient(1)) //Vérifier si ce choix convient au mode recherche
			nullifierDistanceAParcourir();	//Sans quoi on nullifie la distance a parcourir (comme elle ne semble pas valide)

		modeVirageGauche = true;
		r.decoincer(false, true, true);
		return;
	}
	if(droiteExiste && !milieuExiste && !gaucheExiste) //droite
	{
		if(modeRecherche && !directionConvient(3))
			nullifierDistanceAParcourir();

		modeVirageDroite = true;
		r.decoincer(true, false, true);
		return;
	}
	if(!droiteExiste && milieuExiste && !gaucheExiste) //milieu
	{
		if(modeRecherche && !directionConvient(2))
			nullifierDistanceAParcourir();

		r.decoincer(true, true, true);
		modeLigneDroite = true;
		return;
	}

	//--------------------------------
	//Cas complexe
	//--------------------------------

		//--------------------------------
		//Mode foncer
		//--------------------------------
		if(modeFoncer) //Si on est en mode foncer et qu'on peut aller au milieu
		{
			if(milieuExiste)
			{
				r.decoincer(true, true, true);
				modeLigneDroite = true;
				return;
			}
		
			//Si on est en mode foncer et qu'on ne peut pas aller tout droit, on tourne d'un côté ou de l'autre
			//Prioriser le côté qui permet de ce rapprocher
			if(droiteExiste && gaucheExiste)
			{
				//Droite prioritaire
				if(distanceAParcourirX !=4 && distanceAParcourirX != 0)
				{
					if(droiteExiste)
					{
						modeVirageDroite = true;
						r.decoincer(true, false, true);
						return;
					}
					else
					{
						modeVirageGauche = true;
						r.decoincer(false, true, true);
						return;
					}
				}
				else //Gauche prioritaire
				{
					if(gaucheExiste)
					{
						modeVirageGauche = true;
						r.decoincer(false, true, true);
						return;
					}
					else
					{
						modeVirageDroite = true;
						r.decoincer(true, false, true);
						return;
					}
				}
			}

			if(droiteExiste)
			{
				modeVirageDroite = true;
				r.decoincer(true, false, true);
				return;
			}
			else
			{
				modeVirageGauche = true;
				r.decoincer(false, true, true);
				return;
			}
		}

		//--------------------------------
		//Mode recherche
		//--------------------------------
		if(modeRecherche)
		{
			//Vérifier si l'on connait la position du robot
			if(nbIntersection >= nbIntersectionMax)
			{
				nbIntersection = 0;
				tomberEnModeDetection();
			}

			if(distanceAParcourirX == 4 && distanceAParcourirY == 4)
			{
				//On ne connait pas la position du robot on doit donc passer en mode détection pour le trouver
				tomberEnModeDetection();
			}
			else //On connait la position du robot
			{
				//Vérifier si il est possible de se rendre a la position du robot, sans quoi on nullifie la position
				//afin de retomber eventuellement en mode detection
								
				if(distanceAParcourirX !=4 && distanceAParcourirX > 0) //Prioriser la droite
				{
					if(droiteExiste && directionConvient(3))
					{
						modeVirageDroite = true;
						r.decoincer(true, false, true);
						return;
					}
					else if(gaucheExiste && directionConvient(1))
					{
						modeVirageGauche = true;
						r.decoincer(false, true, true);
						return;
					}
				}
				else //Prioriser la gauche
				{
					if(gaucheExiste && directionConvient(1))
					{
						modeVirageGauche = true;
						r.decoincer(false, true, true);
						return;
					}
					else if(droiteExiste && directionConvient(3))
					{
						modeVirageDroite = true;
						r.decoincer(true, false, true);
						return;
					}
				}

				//On priorise le milieu en dernier, puisque si il était au milieu on serait surment en mode foncer
				/*if(milieuExiste && directionConvient(2))
				{
					r.decoincer(true, true, true);
					modeLigneDroite = true;
					return;
				}*/	

				//Si aucun convient
				tomberEnModeDetection();
				/*if(droiteExiste)
				{
					modeVirageDroite = true;
					r.decoincer(true, false, true);
					return;
				}
				else if(gaucheExiste)
				{
					modeVirageGauche = true;
					r.decoincer(false, true, true);
					return;
				}
				else
				{
					r.decoincer(true, true, true);
					modeLigneDroite = true;
					return;
				}*/
			}		
		}
}

void garderEnMemoirePositionsRelatives()
{
	if(positionRalativeX == 4 && positionRalativeY == 4)
		return;

	if(positionRalativeX != 4)
		distanceAParcourirX = positionRalativeX;

	if(positionRalativeY != 4)
		distanceAParcourirY = positionRalativeY;	 
}

void calculerDistance()
{
	can convertisseur=can();
	distance16=convertisseur.lecture(VALEURANALOGIQUE);
}

void ajusterDistance()
{
	distance16=distance16>>2;
	//distance8 = (distance16 & 0x00FF);
	distance8 = distance16;
}

void ajusterDistanceAParcourir()
{
	if(distanceAParcourirX == 4 || distanceAParcourirY == 4)
		return;

	if(directionCourrante == 1) //Nord
	{
		if(distanceAParcourirY != 4)
			distanceAParcourirY--;
		return;
	}

	if(directionCourrante == 2) //Est
	{
		if(distanceAParcourirX != 4)
			distanceAParcourirX--;
		return;
	}

	if(directionCourrante == 3) //Sud
	{
		if(distanceAParcourirY != 4)
			distanceAParcourirY++;
		return;
	}

	if(directionCourrante == 4) //Ouest
	{
		if(distanceAParcourirX != 4)
			distanceAParcourirX++;
		return;
	}
}

void ajusterVitesseVirage()
{
	varianceVitesseVirage -= varianceVitesseVirageDeceleration;
	if(varianceVitesseVirage < varianceVitesseVirageMin)
		varianceVitesseVirage = varianceVitesseVirageMax;
}

void ajusterVitesseVirageDetection()
{
	varianceVitesseVirageDetection -= varianceVitesseVirageDetectionDeceleration;
	if(varianceVitesseVirageDetection < varianceVitesseVirageDetectionMin)
		varianceVitesseVirageDetection = varianceVitesseVirageDetectionMax;
}

void ajusterDelaiAjustementTemporaire()
{
	if(delaisAjustementTemporaire > 0)
		delaisAjustementTemporaire -=10;
}

bool virer(bool sens) //Retourne vrai si le virage est complet
{
	ajusterDelaiAjustementTemporaire();
	ajusterVitesseVirage();
	r.virer(vitesseVirage-varianceVitesseVirage,ajustementGauche, ajustementDroit, sens);

	

	if(sens) //droite
	{	
		if(!capteurDroit()) //Vérifier si le capteur droit est éteint; être certain qu'on a quitter la ligne droite du milieu
			detecteurEnabled = true;

		if(capteurDroit() && detecteurEnabled) //Si le capteur droit est atteint et qu'il est enabled, alors on a fini de virer a droite
		{
			delaisAjustementTemporaire = dureeAjustementTournant;
			ajustementTemporaireG = -ajustementTournant;
			ajustementTemporaireD = ajustementTournant;

			ajusterOrientation(false);
			return true;
		}

		return false;
	}
	else	//gauche
	{
		if(!capteurGauche()) //Vérifier si le capteur gauche est éteint; être certain qu'on a quitter la ligne droite du milieu
			detecteurEnabled = true;

		if(capteurGauche() && detecteurEnabled) //Si le capteur droit est atteint et qu'il est enabled, alors on a fini de virer a gauche
		{
			delaisAjustementTemporaire = dureeAjustementTournant;
			ajustementTemporaireG = ajustementTournant;
			ajustementTemporaireD = -ajustementTournant;

			ajusterOrientation(true);
			return true;
		}

		return false;
	}
}

bool gestionDetection() //Retourne vrai si la detection doit prendre fin (on a fait un tour complet ou on a détecter en chemin)
{
	
	if(delaiMemeOrientation < delaiMemeOrientationMax)
		delaiMemeOrientation += 10;

	ajusterDelaiAjustementTemporaire();
	ajusterVitesseVirageDetection();
	r.virer(vitesseVirageDetection-varianceVitesseVirageDetection,ajustementGauche, ajustementDroit, true);

	if(delaiMemeOrientation < delaiMemeOrientationMax) //Orientation exact
	{
		ajusterPositionRelative(directionCourrante);
	}
	else //Orientation entre deux
	{
		ajusterPositionRelative(directionCourrante+4);
	}

	garderEnMemoirePositionsRelatives();

	if(distanceAParcourirX != 4 ||  distanceAParcourirY != 4) //On a trouvé la souris
	{
		//Finir de virer a droite
		modeVirageDroite = true;
		return true;
	}

	if(true) //on force la droite lors de la détection
	{	
		if(!capteurDroit()) //Vérifier si le capteur droit est éteint; être certain qu'on a quitter la ligne droite du milieu
			detecteurEnabled = true;

		if(capteurDroit() && detecteurEnabled) //Si le capteur droit est atteint et qu'il est enabled, alors on a fini de virer a droite
		{
			detecteurEnabled = false;
			ajusterOrientation(false);

			if(directionCourrante == directionInitialeDetection) //On a fait un tour complet
			{
				modeVirageGauche = true;
				return true;
			}
		}
		return false;
	}

}

void avancerLigneDroite()
{	
	if(perdue())
	{
		 //On sait de quel coté on est partie, on essaie de retrouver la ligne
		if(dernierCapteur == 2) //Dernier capteur atteint est le millieu, continuer tout droit
		{
			if(modeFoncer)
				avancerAvecAjustement(vitesseFoncer,vitesseFoncer);
			else
				avancerAvecAjustement(vitesseBase,vitesseBase);
		}
		else if(dernierCapteur == 1)  //gauche
			viragePourLigneDroite(false,ajustementVirageMoyen);
		else if(dernierCapteur == 3) 
			viragePourLigneDroite(true,ajustementVirageMoyen);

		ajusterDernierCapteur();	

	}
	else	//Au moins 1 capteur est actif
	{
		//Recentrer le robot si nécessaire
		if(capteurMilieu()) //Continuer tout droit
		{
			delaisLigneDroite = 0;
			if(modeFoncer)
				avancerAvecAjustement(vitesseFoncer,vitesseFoncer);
			else
				avancerAvecAjustement(vitesseBase,vitesseBase);

			//On a retrouver le milieu, mais est-t-on droit?

			//On vient de la droite, puisque le dernier capteur était a gauche
			//On doit donc restabiliser le rebot, en tournant légerement vers la droite
			if(dernierCapteur == 1)
			{
				delaisAjustementTemporaire = dureeAjustementLigneDroite;
				ajustementTemporaireG = ajustementLigneDroite;
				ajustementTemporaireD = -ajustementLigneDroite;
			}
			else if(dernierCapteur == 3) //On vient de la gauche
			{
				delaisAjustementTemporaire = dureeAjustementLigneDroite;
				ajustementTemporaireG = -ajustementLigneDroite;
				ajustementTemporaireD = ajustementLigneDroite;
			}

		}
		else if(capteurGauche())//On doit avancer tout droit et le capteur Gauche est allumé, le rebot est donc trop a droite
		{
			//virer legerement a gauche
			viragePourLigneDroite(false,ajustementVirageLeger);
		}
		else if(capteurDroit())
		{
			//virer legerement a droite
			viragePourLigneDroite(true,ajustementVirageLeger);
		}

		ajusterDernierCapteur();//Se souvenir du dernier capteur actif
	}
}

bool reculer()
{
	//Reculer jusqu'à ce qu'on détecte une intersection ou que le temps actif soit suffisaemment élevé	
	ajusterDernierCapteur();//Se souvenir du dernier capteur actif
	
	if(finRecul)
	{
		tempsReculExtra +=10;
		if(tempsReculExtra>= tempsReculExtraMax)
			return true;
	}
	else
	{
		if(!perdue())
			tempsReculActif +=10;
		if(tempsReculActif >= tempsReculActifMax)
			finRecul = true;
	

		if(detecterIntersection())
			finRecul = true;
	}
	
	reculerAvecAjustement(vitesseReculer,vitesseReculer);
	return false;
}

void ajusterTempsActifRecent()
{
	if(tempsLigneDroiteDepuisIntersection < tempsLigneDroiteActiveMax)
	{
		if(!perdue())	
			tempsLigneDroiteActive += 10;
		tempsLigneDroiteDepuisIntersection += 10;
	}
	else
	{	
		if(!perdue())
		{
			tempsLigneDroiteActive += 10;
			if(tempsLigneDroiteActive > tempsLigneDroiteActiveMax)
				tempsLigneDroiteActive = tempsLigneDroiteActiveMax;
		}
		else
		{
			if(tempsLigneDroiteActive <= 20)
				tempsLigneDroiteActive = 0;
			else
				tempsLigneDroiteActive -= 20;
		}
	}
}

void ajusterTempsActifSansCapteur()
{
	if(delaisAjustementTemporaire <= 0) //Ne pas ajuster le temps hors piste lors d'ajustements
	{
		if(perdue())
		{
			tempsActifSansCapteur += 10;
			if(tempsActifSansCapteur >= tempsActifSansCapteurMax)
			{
				tempsActifSansCapteur = 0;
				modeLigneDroite = false;
				tomberEnModeReculer();
			}
		}
		else
		{
			tempsActifSansCapteur = 0;
		}
	}
}

bool verifierVictoire()
{
	if(positionRalativeX == 0)
	{
		if(positionRalativeY == 0 || positionRalativeY == 1 || positionRalativeY == -1)
			return true;
	}
	else if(positionRalativeY == 0)
	{
		if(positionRalativeX == 1 || positionRalativeX == -1)
			return true;
	}

	return false;
}

void gestionModeVictoire()
{
	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
	r.allumerDEL(portDEL, pinCouleur2);

	if(debug)
	{
		r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
		r.allumerDEL(portDEL, pinCouleur);
		_delay_ms(5);
		r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
		r.allumerDEL(portDEL, pinCouleur2);
		_delay_ms(5);
	}
}

void verifierPossibiliteFoncer()
{
	uint8_t dist = getDistanceSouris();

	if(dist == 0)
	{
		modeVictoire = true;
		return;
	}
	else if(dist != 4) //if(dist != 4)
	{
		nbIntersection = 0;
		modeFoncerConsecutif++;
		if(modeFoncerConsecutif > modeFoncerConsecutifMax)
		{
			modeFoncer = true;
			modeRecherche = false;
		}
		//La souris est en ligne droite

	}
	else
	{
		modeFoncerConsecutif = 0;
		modeFoncer = false;
		modeRecherche = true;
	}
}

void gestionDeplacementChat()
{
	ajusterPositionRelative(directionCourrante);

	//---------------------------
	//Vérification de la victoire
	//---------------------------
	if(modeVictoire)
	{
		r.arreterMoteurs();
		r.arreterSon();
		gestionModeVictoire();
		return;
	}
	modeVictoire = verifierVictoire();	

	//se souvenir de la position du robot
	garderEnMemoirePositionsRelatives();

	if(debug)
	{
		r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
		if(modeFoncer)
			r.allumerDEL(portDEL, pinCouleur);
		if(modeRecherche)
			r.allumerDEL(portDEL, pinCouleur2);
	}

	//---------------------------
	//Mode de déplacement normal
	//---------------------------
	if(modeLigneDroite)
	{
		//Vérifier si on doit foncer
		//Donc que la sourie est droit devant
		verifierPossibiliteFoncer();
		
		if(detecterIntersection())
		{	
			tomberEnModerDetecterTypeIntersection(false);
			ajusterDistanceAParcourir();
			determinerTypeIntersection();
		}
		else
		{
			ajusterTempsActifSansCapteur();
			ajusterTempsActifRecent();
			tempsDepuisIntersection+=10;
			if(tempsDepuisIntersection >=tempsAttenteMaxIntersection) //Déclencher intersection manuelle
			{
				//Intersection manuelle, donc détecter si le temps actif recent est suffisaement élevé pour
				//qu'on ait le droit de continuer tout droit
				if(tempsLigneDroiteActive >= tempsLigneDroiteActiveSeuil)
				{
					tempsDepuisIntersection = 0;
					tempsLigneDroiteActive = 0;
					tempsLigneDroiteDepuisIntersection = 0;
					avancerLigneDroite();
				}
				else
				{
					modeLigneDroite = false;
					tomberEnModeReculer();
				}
			}
			else
			{
				avancerLigneDroite();
			}
		}
	}
	else if(modeIntersection) //Détection intersection
	{
		if(determinerTypeIntersection())
		{
			if(!modeFoncer && nbIntersection < nbIntersectionMax)
				nbIntersection++;
			
			modeIntersection = false;
			decisionVirage(false, false);
		}
		else
		{
			avancerLigneDroite(); //Continuer d'ajuster le déplacement
		}
	}
	else if(modeVirageDroite)
	{
		if(virer(true))
		{
			if(debug)
				r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			modeVirageDroite = false;
			modeLigneDroite = true;
			dernierCapteur = 3; //Mettre le dernier virage comme étant celui de droite
		}
	}
	else if(modeVirageGauche)
	{
		if(virer(false))
		{
			if(debug)
				r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			modeVirageGauche = false;
			modeLigneDroite = true;
			dernierCapteur = 1; //Mettre le dernier virage comme étant celui de gauche
		}
	}
	else if(modeReculer)
	{
		if(reculer())
		{
			tempsDepuisIntersection = 0;
			tempsLigneDroiteActive = 0;
			tempsLigneDroiteDepuisIntersection = 0;
			tempsActifSansCapteur = 0;
			modeLigneDroite = true;
		}
	}
	else if(modeDetection)
	{
		//---------------------------
		//Mode de détection de la souris
		//---------------------------
		if(gestionDetection())
		{
			modeDetection = false;
			modeRecherche = true;
			modeFoncer = false;
		}
	}
}

uint8_t BoutonEstEnfonce()
{
	if(BOUTON_ENFONCE)
	{
	  // l'operateur !! permet de transformer une valeur quelconque en 0 ou 1.
	  // ie: BOUTON_ENFONCE renvoit 2, !!2 = 1.
	  
	  return !!BOUTON_ENFONCE;
	}
	// Le bouton n'est pas enfoncé
	return 0;
}
	
void modeTest()
{
    uint16_t valeur;
      // Declaration d'un objet can.
     can convertisseur=can();
    
      
      // La valeur minimale ne peut pas etre egale a 0.
      // La valeur 7 a ete designee comme la plus petite valeur retournee lorsque le capteur ne detecte aucun objet.
     while (BoutonEstEnfonce())
     {
       // Variable locale qui recoit la valeur numerique apres la conversion de la valeur analogique. 
       valeur=convertisseur.lecture(VALEURANALOGIQUE);
      _delay_ms(10); 
      // Decalage de 2 bits vers la droite pour ne garder que 8 bits.
      valeur=valeur>>2;
       
	jouerSonDistance(valeur);

	  if(!BoutonEstEnfonce())
	  {
	    _delay_ms(15);
	     r.arreterSon();
	  }
	    
     }
     

}

void tomberEnEtatTransitoire()
{
	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);

	for(uint8_t i = 0; i<3; i++) //La DEL clignote pendant 3 secondes
	{
		for(uint8_t j = 0; j<4; j++) //La DEL clignote 4 fois par seconde
		{
			r.allumerDEL(portDEL,pinCouleur);
			_delay_ms(125);

			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			_delay_ms(125);
		}
	}

	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
}

int main ()
{

	r.initialisation();
	r.debut();
	
	//------------------------
	//Initialisation des ports
	//------------------------

	DDRA = 0x00; // Capteur de distance sur A0

	DDRB = 0xff; // sortie, del et son
	
	DDRC = 0x00; // Entree, capteur ligne	

	DDRD = 0x00; // Entree bouton suivit de Sortie moteurs

	//------------------------
	//Initialisation variables globales
	//------------------------

	//var virage
		vitesseVirage = 110; //120, 100, 95
		detecteurEnabled = false;

		varianceVitesseVirage = 0;
		varianceVitesseVirageDeceleration = 2;
		varianceVitesseVirageMax = 0;
		varianceVitesseVirageMin = -50;

		distance16 = 0;
		distance8 = 0;

	//Var intersection
		modeLigneDroite = true;
		modeIntersection = false;
		modeVirageGauche = false;
		modeVirageDroite = false;
		modeReculer = false;

		franchieGauche = false;
		franchieMilieu = false;
		franchieDroite = false;

		tempsIntersection = 0;
		tempsIntersectionMax = 350;
		seuilTempsActifToutDroit = 300;

		tempsDepuisIntersection = 0;
		tempsAttenteMaxIntersection = 2500; //2250

		virageForce = false;

	//Var ligne droite
		dernierCapteur = 2;
		vitesseBase = 120; //130
		ajustementGauche = 0;
		ajustementDroit = 0;
		ajustementVirageLeger = 20;
		ajustementVirageMoyen = 35;
		ajustementMax = 14;
		ajustementMin = ajustementMax * -1;
		ajustementRetour = 1;
		delaisLigneDroite = 0;
		delaisMaxLigneDroite = 50;

	//Var ajustement
		delaisAjustementTemporaire = 0;
		ajustementTournant = 15;
		ajustementLigneDroite = 2;
		dureeAjustementTournant = 50;
		dureeAjustementLigneDroite = 10;

	//Var reculer
		vitesseReculer = 140;//130, 170
		tempsReculActif = 0;
		tempsReculActifMax = 100;
		tempsReculExtra = 0;
		tempsReculExtraMax = 50;
		
	//Var tomber
		tempsLigneDroiteActive = 0;
		tempsLigneDroiteDepuisIntersection = 0;
		tempsLigneDroiteActiveMax = 250; //On regarde le temps actif sur les dernieres 250 ms
		tempsLigneDroiteActiveSeuil = 120; //Seuil a atteindre pour continuer tout droit, sans quoi on recule

		tempsActifSansCapteur = 0;
		tempsActifSansCapteurMax = 100;

	//var prise de décision chat
		directionCourrante = 1; //nord
		positionRalativeX = 0;
		positionRalativeY = 0;
		distanceAParcourirX = 4;
		distanceAParcourirY = 4;

		modeRecherche = true;
		modeFoncer = false;
		modeVictoire = false;
		modeDetection = false;

		vitesseFoncer = 160;
		modeFoncerConsecutif = 0;
		modeFoncerConsecutifMax = 0;

		vitesseVirageDetection = 120;
		varianceVitesseVirageDetection = 0; 			
		varianceVitesseVirageDetectionDeceleration = 2;
		varianceVitesseVirageDetectionMax = 0;	
		varianceVitesseVirageDetectionMin = -60;
		directionInitialeDetection = 1;

		delaiMemeOrientation = 0;
		delaiMemeOrientationMax = 80;

		nbIntersection = 2;
		nbIntersectionMax = 2;

	//------------------------
	//Mode test et attente
	//------------------------
	if( BoutonEstEnfonce())
		modeTest();

	DDRD = 0xff; //Sortie moteurs
	tomberEnEtatTransitoire(); //Pendant 3 secondes

	//------------------------
	//Boucle de déplacement
	//------------------------
	while(true)
	{	
		calculerDistance();
		_delay_ms(10);
		ajusterDistance();
		jouerSonDistance(distance8);
		gestionDeplacementChat();

		if(!modeVictoire)
		{
			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			if(modeFoncer)
				r.allumerDEL(portDEL, pinCouleur);

			/*uint8_t dist = getDistanceSouris();
			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);	
			if(dist < 3 )
				r.allumerDEL(portDEL, pinCouleur);*/

		}
		


		/*r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
		if(distance8 <= 50)
			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
		else if(distance8 > 140)
			r.allumerDEL(portDEL, pinCouleur);
		else if(distance8 >80 && distance8<=140)
			r.allumerDEL(portDEL, pinCouleur2);
		else
			r.allumerDEL(portDEL, pinCouleur);*/
	}

	return 0;
}
