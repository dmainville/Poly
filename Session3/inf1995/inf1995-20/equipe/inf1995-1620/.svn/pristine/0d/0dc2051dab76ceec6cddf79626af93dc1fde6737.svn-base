/****************************************************************************
 * Fichier: TP3_ex1.cpp
 * Auteur: Yannick OUellet et David Mainville
 * Date: 16 Septembre 2013
 * DESCRIPTION : Activation de LED ambrée avec bouton.
 ****************************************************************************/

/* Information sur branchements */
/* Port A0 branché sur +        DEL*/
/* Port A1 branché sur -        DEL*/

/* Port B2 branché sur module de son*/
/* Port B3 branché sur module de son*/

/* Port D4 branché sur enable moteur gauche*/
/* Port D6 branché sur sens moteur gauche*/

/* Port D5 branché sur enable moteur droit*/
/* Port D7 branché sur sens moteur droit*/


// F_CPU permet de définir la vitesse du micro-controleur soit 8MHz
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include "lib/libRobot.h"
#include "memoire_24.h"

LibRobot r;
volatile uint8_t& portDEL = PORTB;
uint8_t pinCouleur  = _BV(PORTB0);
uint8_t pinCouleur2  = _BV(PORTB1);

bool modeLigneDroite;
uint8_t dernierCapteur; //1 gauche, 2 milieu, 3 droite, 0 rien
uint8_t vitesseBase;
int8_t ajustementGauche;
int8_t ajustementDroit;
int8_t ajustementMax;
int8_t ajustementMin;
int8_t ajustementVirageLeger; //Ajustement de la vitesse lors d'une stabilisation
int8_t ajustementVirageMoyen;
uint16_t tempDepuisIntersection;
uint16_t delaisLigneDroite;
uint16_t delaisMaxLigneDroite;

bool temp = true;

bool capteurDroit()
{
	return !(PINA & _BV(PORTA6));
}
bool capteurMilieu()
{
	return !(PINA & _BV(PORTA4));
}
bool capteurGauche()
{
	return !(PINA & _BV(PORTA2));
}

bool detecterIntersection()
{
	return (capteurMilieu() && (capteurGauche() || capteurDroit()));
}

bool perdue()
{
	return (!capteurDroit() && !capteurMilieu() && !capteurGauche());
}

void ajusterDernierCapteur()
{
	if(capteurDroit())
		dernierCapteur = 3;
	if(capteurMilieu())
		dernierCapteur = 2;
	if(capteurGauche())
		dernierCapteur = 1;	
}

void limiterAjustement()
{
	if(ajustementGauche > ajustementMax)
		ajustementGauche = ajustementMax;
	if(ajustementDroit > ajustementMax)
		ajustementDroit = ajustementMax;

	if(ajustementGauche < ajustementMin)
		ajustementGauche = ajustementMin;
	if(ajustementDroit < ajustementMin)
		ajustementDroit = ajustementMin;
}

void ajustementVitesse(bool sens)
{
	delaisLigneDroite++;
	if(delaisLigneDroite >= delaisMaxLigneDroite)
	{
		delaisLigneDroite = 0;
		if(sens)
		{
			ajustementGauche++;
			ajustementDroit--;
			limiterAjustement();
		}
		else
		{
			ajustementGauche--;
			ajustementDroit++;
			limiterAjustement();
		}
	}
}

void viragePourLigneDroite(bool sens, int8_t ajustementVitesseVirage)//false gauche, true droite
{
	if(sens)//Droite
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(true);
		r.avancer(vitesseBase + ajustementVitesseVirage, vitesseBase - ajustementVitesseVirage,ajustementGauche, ajustementDroit);
	}
	else//Gauche
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(false);
		r.avancer(vitesseBase - ajustementVitesseVirage, vitesseBase + ajustementVitesseVirage,ajustementGauche, ajustementDroit);
	}
}

void pleurerCommeUnBebe()
{
	r.eteindreDEL(portDEL,pinCouleur,pinCouleur2);
	r.allumerDEL(portDEL, pinCouleur);

	while(perdue())
	{

	}

	r.eteindreDEL(portDEL, pinCouleur,pinCouleur2);
}

void avancerLigneDroite()
{	
	
	/*if(temp)
		r.allumerDEL(portDEL,pinCouleur);
	else
		r.allumerDEL(portDEL,pinCouleur2);
	temp = !temp;*/

	if(perdue())
	{
		if(dernierCapteur == 0) //On est perdue et on ne connait pas le dernier capteur
		{
			//On doit retrouver une ligne
			//Présentement on ne fait rien
			pleurerCommeUnBebe();
		}
		else //On sait de quel coté on est partie, on essaie de retrouver la ligne
		{
			if(dernierCapteur == 2) //Dernier capteur atteint est le millieu, continuer tout droit
				r.avancer(vitesseBase,vitesseBase,ajustementGauche, ajustementDroit);//G, D, aG, aD
			else if(dernierCapteur == 1)  //gauche
				viragePourLigneDroite(false,ajustementVirageMoyen);
			else if(dernierCapteur == 3) 
				viragePourLigneDroite(true,ajustementVirageMoyen);

			ajusterDernierCapteur();	
		}
	}
	else	//Au moins 1 capteur est actif
	{
		//Recentrer le robot si nécessaire
		if(capteurMilieu()) //Continuer tout droit
		{
			delaisLigneDroite = 0;
			r.avancer(vitesseBase,vitesseBase,ajustementGauche, ajustementDroit);//G, D, aG, aD

			//On a retrouver le milieu, mais est-t-on droit?

			//On vient de la droite, puisque le dernier capteur était a gauche
			//On doit donc restabiliser le rebot, en tournant légerement vers la droite
			if(dernierCapteur == 1)
			{
				ajustementGauche+= 3;
				ajustementDroit-= 3;
				limiterAjustement();	
			}
			else if(dernierCapteur == 3) //On vient de la gauche
			{
				ajustementGauche-= 3;
				ajustementDroit+= 3;
				limiterAjustement();	
			}

		}
		else if(capteurGauche())//On doit avancer tout droit et le capteur Gauche est allumé, le rebot est donc trop a droite
		{
			//virer legerement a gauche
			viragePourLigneDroite(false,ajustementVirageLeger);
		}
		else if(capteurGauche())
		{
			//virer legerement a droite
			viragePourLigneDroite(true,ajustementVirageLeger);
		}

		ajusterDernierCapteur();//Se souvenir du dernier capteur actif
	}
}

void gestionDeplacementSouris()
{
	if(modeLigneDroite)
	{
		if(detecterIntersection())
		{
			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			r.allumerDEL(portDEL, pinCouleur);
			_delay_ms(500);
			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);			
		}
		else
		{
			avancerLigneDroite();
		}
	}

}

int main()
{


	r.initialisation();
	r.debut();

	//------------------------
	//Initialisation des ports
	//------------------------

	//LE son sur B2-3
	DDRB = 0xff; // sortie, son et del

	DDRA = 0x00; // Entree, capteur ligne	

	DDRD = 0xff; // sortie, moteurs

	//------------------------
	//Initialisation variables globales
	//------------------------
	modeLigneDroite = true;
	dernierCapteur = 0;
	vitesseBase = 150;
	ajustementGauche = 0;
	ajustementDroit = 0;
	ajustementVirageLeger = 3;
	ajustementVirageMoyen = 4;
	ajustementMax = 4;
	ajustementMin = ajustementMax * -1;
	delaisLigneDroite = 0;
	delaisMaxLigneDroite = 20;
		
	while(true)
	{	
		gestionDeplacementSouris();
		_delay_ms(10);
	}


	return 0;
}
