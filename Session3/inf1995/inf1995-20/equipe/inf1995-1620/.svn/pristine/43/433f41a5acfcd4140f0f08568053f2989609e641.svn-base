/****************************************************************************
 * Fichier: robot_chat.cpp
 * Auteur: Mario Saliby(1668958) et Youssef Zemmahi(1665843) et Yannick Ouellet et David Mainville 
 * DESCRIPTION : Chat
 ****************************************************************************/

/* Information sur branchements */

/* Port A0 branché sur capteur distance*/

/* Port B0 branché sur +        DEL*/
/* Port B1 branché sur -        DEL*/
/* Port B2 branché sur module de son*/

/* Port C2 branché sur capteur ligne gauche*/
/* Port C4 branché sur capteur ligne milieu*/
/* Port C6 branché sur capteur ligne droit*/

/* Port D4 branché sur enable moteur gauche*/
/* Port D6 branché sur sens moteur gauche*/

/* Port D5 branché sur enable moteur droit*/
/* Port D7 branché sur sens moteur droit*/

#define F_CPU 8000000UL
#include<avr/io.h>
#include<util/delay.h>
#include "lib/libRobot.h"
#include <avr/interrupt.h> 
#include "can.h"

#define VALEURANALOGIQUE (PINA & _BV(1))
#define BOUTON_ENFONCE (PIND & _BV(2))

//-----------------------------
//Lib et utils
//-----------------------------
LibRobot r;
volatile uint8_t& portDEL = PORTB;
uint8_t pinCouleur  = _BV(PORTB0);
uint8_t pinCouleur2  = _BV(PORTB1);


uint8_t BoutonEstEnfonce()
	{
		if(BOUTON_ENFONCE)
		{
		  // l'operateur !! permet de transformer une valeur quelconque en 0 ou 1.
       		  // ie: BOUTON_ENFONCE renvoit 2, !!2 = 1.
		  
		  return !!BOUTON_ENFONCE;
		}
		// Le bouton n'est pas enfoncé
		return 0;
	}

	
void modeTest()
{
    uint16_t valeur;
     r.initialisation();
      r.debut();
      // Declaration d'un objet can.
     can convertisseur=can();
    
      
      // La valeur minimale ne peut pas etre egale a 0.
      // La valeur 7 a ete designee comme la plus petite valeur retournee lorsque le capteur ne detecte aucun objet.
     while (BoutonEstEnfonce())
     {
       // Variable locale qui recoit la valeur numerique apres la conversion de la valeur analogique. 
       valeur=convertisseur.lecture(VALEURANALOGIQUE);
      _delay_ms(100); 
      // Decalage de 2 bits vers la droite pour ne garder que 8 bits.
      valeur=valeur>>2;
       
      if(valeur>7) 
	    {	
		 // Intervalles qui definissent les differents sons emis dependamment de la force du signal de retour.                                                                                     
		 if ((valeur>7) &&(valeur<=17))
		     r.jouerSon(66);
		  if ((valeur>17) &&(valeur<=33))
		    r.jouerSon(67);
		  
		  if  ((valeur>33) &&(valeur<=49))
		     r.jouerSon(68);
	
		  if( (valeur>49)&&(valeur<=65))
		     r.jouerSon(69);
	
		   if ((valeur>65) &&(valeur<=81))
		      r.jouerSon(70);
	
		   if  ((valeur>81) &&(valeur<=97))
		     r.jouerSon(71);
		 
		   if( (valeur>97)&&(valeur<=113))
		       r.jouerSon(72);
			
		   if ((valeur>113) &&(valeur<=129))
		    r.jouerSon(73);
		
		   if ((valeur>129) &&(valeur<=145))
		     r.jouerSon(74);
		    
		   if  ((valeur>145) &&(valeur<=161))
		      r.jouerSon(75);
		  
		   if( (valeur>161)&&(valeur<=177))
		     r.jouerSon(76);
		   
		   if ((valeur>177) &&(valeur<=193))
		    r.jouerSon(77);
		  
		   if ((valeur>193) &&(valeur<=209))
		     r.jouerSon(78);
		  
		   if  ((valeur>209) &&(valeur<=225))
		     r.jouerSon(79);
		  
		   if( (valeur>225)&&(valeur<=241))
		     r.jouerSon(80);
		  
		   if ((valeur>241) &&(valeur<256)) 
		     r.jouerSon(81);
	    }
	   else
	    {
		 // Commande qui arrete le son.
		 r.arreterSon();
	    }
	  if(!BoutonEstEnfonce())
	  {
	    _delay_ms(15);
	     r.arreterSon();
	  }
	    
     }
     

}

void tomberEnEtatTransitoire()
{
	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);

	for(uint8_t i = 0; i<3; i++) //La DEL clignote pendant 3 secondes
	{
		for(uint8_t j = 0; j<4; j++) //La DEL clignote 4 fois par seconde
		{
			r.allumerDEL(portDEL,pinCouleur);
			_delay_ms(125);

			r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
			_delay_ms(125);
		}
	}

	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
}

int main ()
{
	//------------------------
	//Initialisation des ports
	//------------------------

	DDRA = 0x00; // Capteur de distance sur A0

	DDRB = 0xff; // sortie, del et son
	
	DDRC = 0x00; // Entree, capteur ligne	

	DDRD = 0x00; // Entree bouton suivit de Sortie moteurs

	if( BoutonEstEnfonce())
		modeTest();

	tomberEnEtatTransitoire(); //Pendant 3 secondes

	return 0;
}
