/****************************************************************************
 * Fichier: projet.cpp
 * Auteur: David Mainville
 * Date: 
 * DESCRIPTION : Souris.
 ****************************************************************************/

/* Information sur branchements */

/* Port A0 branché sur capteur lumiere gauche*/
/* Port A1 branché sur capteur lumiere droit*/
/* Port A2 branché sur capteur ligne gauche*/
/* Port A4 branché sur capteur ligne milieu*/
/* Port A6 branché sur capteur ligne droit*/

/* Port B0 branché sur +        DEL*/
/* Port B1 branché sur -        DEL*/

/* Port C0 branché sur module de son*/

/* Port D4 branché sur enable moteur gauche*/
/* Port D6 branché sur sens moteur gauche*/

/* Port D5 branché sur enable moteur droit*/
/* Port D7 branché sur sens moteur droit*/


//TODO - Trouver direction lorsqu'un seul capteur

// F_CPU permet de définir la vitesse du micro-controleur soit 8MHz
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include "lib/libRobot.h"
#include "memoire_24.h"
#include "can.h"

//-----------------------------
//Lib et utils
//-----------------------------
LibRobot r;
volatile uint8_t& portDEL = PORTB;
uint8_t pinCouleur  = _BV(PORTB0);
uint8_t pinCouleur2  = _BV(PORTB1);

//-----------------------------
//Mode de déplacement, prise de décision
//-----------------------------
bool modeLigneDroite;
bool modeIntersection;
bool modeVirageGauche;
bool modeVirageDroite;
bool modeReculer;
uint8_t typeIntersection;

//-----------------------------
//Constante et variable pour virage
//-----------------------------
int8_t vitesseVirage;
bool virageForce; //Si le mode détection est provoquer par le temps
bool detecteurEnabled; 	//Est a vrai si le detecteur peut signuifier la fin d'un virage
			//Pour etre valide le détecteur doit être éteint au moins une fois pendant un virage
			//Permet d'éviter de concidèrer un ligne droite comme un tournant lors d'un virage

//-----------------------------
//Constante et variable pour determinerTypeIntersection
//-----------------------------
bool franchieGauche;
bool franchieMilieu;
bool franchieDroite;

bool gaucheExiste; //On peut tourner a gauche
bool droiteExiste;
bool milieuExiste;

uint16_t tempsIntersection;
uint16_t tempsIntersectionMax; //Temps maximum pour détecter le type d'intersection
uint16_t tempsActif;

uint8_t dernierCapteurIntersection; //1 gauche, 2 milieu, 3 droite, 0 rien

//-----------------------------
//Constante et variable pour avancerLigneDroite
//-----------------------------
uint8_t dernierCapteur; //1 gauche, 2 milieu, 3 droite, 0 rien
uint8_t vitesseBase;
int8_t ajustementGauche;
int8_t ajustementDroit;
int8_t ajustementMax;
int8_t ajustementMin;
int8_t ajustementRetour; //Lorsque l'on revient au centre, aujustement pour remttre le robot droit dans le sens inverse duquel on vient
int8_t ajustementVirageLeger; //Ajustement de la vitesse lors d'une stabilisation
int8_t ajustementVirageMoyen;
uint16_t delaisLigneDroite;
uint16_t delaisMaxLigneDroite;

int16_t delaisAjustementTemporaire;
int8_t ajustementTemporaireG;
int8_t ajustementTemporaireD;
int8_t ajustementTournant;
int8_t ajustementLigneDroite;
uint8_t dureeAjustementTournant;
uint8_t dureeAjustementLigneDroite;

uint16_t tempsDepuisIntersection;
uint16_t tempsAttenteMaxIntersection; //Temps d'attente maximal, avant de déclancher un intersection

//-----------------------------
//Constante et variable pour reculer
//-----------------------------
uint8_t vitesseReculer;
int8_t tempsReculActif;
int8_t tempsReculActifMax;
bool finRecul; //Utiliser pour faire reculer un peu plus apres avoir retrouvé la ligne
int8_t tempsReculExtra;
int8_t tempsReculExtraMax;

//-----------------------------
//Constante et variable pour ajusterVitesseBateries
//-----------------------------
bool debutIntersectionBateries;
uint16_t tempIntersectionBateries;
uint16_t tempIntersectionMaxBateries;
uint16_t tempIntersectionMinBateries;
int8_t ajustementVitesseBaseBateries; //facteur d'ajustement de la vitesse de base lorsqu'un intersection est trop rapide ou trop longue
int8_t ajustementVitesseVirageBateries;
int8_t ajustementVitesseReculerBateries;
uint8_t vitesseMin;
uint8_t vitesseMax;

//-----------------------------
//Constante et variable pour capteur lumières
//-----------------------------
uint8_t seuilEclaire;	//Valeur à partir de laquelle on détecte que le robot a été éclairé
uint8_t coteForce;	//0 = aucun côté forcé, 1 = gauche forcé, 2 = droite forcé
uint8_t delaiLumiereMax;  //Utiliser pour éviter de détecter a chaque coup de boucle
uint8_t delaiLumiereCourrant;


//-----------------------------
//Constante et variable pour éviter de tomber
//-----------------------------
//Vérifier le % de temps actif dans un delai recent pour s'assurer qu'on n'est pas dans le vide
//La vérification de la limite sera faite lors des déclenchement de delai max atteint
uint16_t tempsLigneDroiteActive;
uint16_t tempsLigneDroiteDepuisIntersection;
uint16_t tempsLigneDroiteActiveMax;
uint16_t tempsLigneDroiteActiveSeuil;

//Vérification du temps sans capteur (qui est reset chaque fois qu'un capteur est atteint)
//TODO


bool capteurDroit()
{
	return !(PINA & _BV(PORTA6));
}
bool capteurMilieu()
{
	return !(PINA & _BV(PORTA4));
}
bool capteurGauche()
{
	return !(PINA & _BV(PORTA2));
}

void desactiveLumiereForce()
{
	coteForce = 0;
	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
}

void ajusterFranchie()//Ajuste les variables de franchissement
{
	if(capteurGauche())
		franchieGauche = true;
	if(capteurMilieu())
		franchieMilieu = true;
	if(capteurDroit())
		franchieDroite = true;
}

void ajusterPossibiliteIntersection()//Ajuste les variables de tournant possible
{
	
	//La gauche et la droite sont disponible si ils le sont en même temps que le milieu
	//Sauf dans les cas ou l'on est décallé du côté inverse (autrement dit, si l'on est décallé a droite et qu'on
	//	 a le capteur milieu et le capteur gauche, on ne peut rien conclure)
	if(capteurMilieu() && dernierCapteurIntersection == 2)
	{
		if(capteurGauche())
			gaucheExiste = true;
		if(capteurDroit())
			droiteExiste = true;
	}


	if(dernierCapteurIntersection == 1) //On est a droite de la ligne, puisque le dernier capteur est le gauche
	{
		//Lorsqu'on est déja décallé a droite, le simple fait d'activer le capteut droit signifie que l'on peut y tourner
		if(capteurDroit())
			droiteExiste = true;

		//Pour pouvoir déterminer si le milieu existe, 
	}
	else if(dernierCapteurIntersection == 3)//On est a gauche de la ligne
	{
		//Lorsqu'on est déja décallé a gauche, le simple fait d'activer le capteut gauche signifie que l'on peut y tourner
		if(capteurGauche())
			gaucheExiste = true;
	}
}


bool detecterIntersection() //Return true si une intersection est trouvé
{
	return (capteurMilieu() && (capteurGauche() || capteurDroit()));
}

bool perdue()
{
	return (!capteurDroit() && !capteurMilieu() && !capteurGauche());
}

void tomberEnModerDetecterTypeIntersection(bool force) //bool force, détermine si on est en détection d'intersection force par la minuterie
{
	virageForce = force;
	tempsDepuisIntersection = 0;
	tempsLigneDroiteActive = 0;
	tempsLigneDroiteDepuisIntersection = 0;
	
	//Changer en mode Trouver intersection
	modeLigneDroite = false;
	modeIntersection = true;

	franchieGauche = false;
	franchieMilieu = false;
	franchieDroite = false;

	gaucheExiste = false;
	droiteExiste = false;
	milieuExiste = false;

	tempsIntersection = 0;
	tempsActif = 0;
	dernierCapteurIntersection = dernierCapteur;
}

bool determinerTypeIntersection() //return true si le type est trouvé, false sinon
{
	//Vérifier si on passe en mode detecter intersection normale
	if(virageForce && detecterIntersection()) //Dans quel cas, on retourne en mode detecter intersection avec le delai remit a 0
	{
		//Reseter la détection d'intersection
		tomberEnModerDetecterTypeIntersection(false);		
	}

	tempsIntersection += 10;
	if(!perdue())	//Si au moins 1 capteurs actif augmenter le temps actif
		tempsActif +=10;

	if(tempsActif >= 400)
		milieuExiste = true;

	//Si au moins la moitié du temps a été passé, qu'on est en virage forcé, qu'aucun capteur est allumé et que le temps actif est très faible, 
	//prendre une décision tout de suite
	if(perdue() && tempsActif < 120 && tempsIntersection > tempsIntersectionMax>>1 && virageForce)
	{
		//Ici on recule peu importe, étant donné qu'aucune intersection n'a été détecté, sans quoi on serait tomber en mode detecter non forcé
		franchieDroite = false;
		franchieGauche = false;
		franchieMilieu = false;
		return true;
	}

	if(tempsIntersection >= tempsIntersectionMax) //Le temps est écoulé, prendre une decision
	{

		if(!franchieDroite)
		{	
			droiteExiste = false;
			gaucheExiste = true;
		}
		else if(!franchieGauche)
		{	
			droiteExiste = true;
			gaucheExiste = false;
		}

		return true;
	}

	if(gaucheExiste && milieuExiste && droiteExiste)//Si tous le type d'intersection sont permis, arrêter de vérifier les types d'intersection
	{
		return true;
	}

	ajusterFranchie();
	ajusterPossibiliteIntersection();

	return false;
}

void ajusterDernierCapteur()
{
	if(capteurDroit())
		dernierCapteur = 3;
	if(capteurMilieu())
		dernierCapteur = 2;
	if(capteurGauche())
		dernierCapteur = 1;	
}

void limiterAjustement()
{
	if(ajustementGauche > ajustementMax)
		ajustementGauche = ajustementMax;
	if(ajustementDroit > ajustementMax)
		ajustementDroit = ajustementMax;

	if(ajustementGauche < ajustementMin)
		ajustementGauche = ajustementMin;
	if(ajustementDroit < ajustementMin)
		ajustementDroit = ajustementMin;
}

void ajustementVitesse(bool sens)
{
	delaisLigneDroite++;
	if(delaisLigneDroite >= delaisMaxLigneDroite)
	{
		delaisLigneDroite = 0;
		if(sens)
		{
			ajustementGauche++;
			ajustementDroit--;
			limiterAjustement();
		}
		else
		{
			ajustementGauche--;
			ajustementDroit++;
			limiterAjustement();
		}
	}
}

void avancerAvecAjustement(int16_t vG, int16_t vD)
{
	if(delaisAjustementTemporaire > 0)
	{
		r.avancer(vG,vD,ajustementGauche+ajustementTemporaireG, ajustementDroit+ajustementTemporaireD);
	}
	else
	{
		r.avancer(vG,vD,ajustementGauche, ajustementDroit);
	}
}

void reculerAvecAjustement(int16_t vG, int16_t vD)
{
	r.reculer(vG,vD,ajustementGauche, ajustementDroit);
}

void viragePourLigneDroite(bool sens, int8_t ajustementVitesseVirage)//false gauche, true droite
{
	if(sens)//Droite
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(true);
		avancerAvecAjustement(vitesseBase + ajustementVitesseVirage, vitesseBase - ajustementVitesseVirage);
	}
	else//Gauche
	{
		//Balancer la vitesse des moteurs pour le futur
		ajustementVitesse(false);
		avancerAvecAjustement(vitesseBase - ajustementVitesseVirage, vitesseBase + ajustementVitesseVirage);
	}
}

void tomberEnModeReculer()
{
	tempsReculActif = 0;
	finRecul = false;
	tempsReculExtra = 0;
	modeReculer = true;
	r.decoincer(true, true, false);
}

void decisionVirage(bool gaucheForce, bool droiteForce) //Les propriétées détermine si la gauche ou la droite est forcée
{
	//Si rien n'existe, tomber en mode reculer
	if(!droiteExiste && !milieuExiste && !gaucheExiste)
	{
		tomberEnModeReculer();
		return;
	}
	
	if(droiteExiste && !milieuExiste && !gaucheExiste)
	{
		modeVirageDroite = true;
		r.decoincer(true, false, true);
	}
	else if(!droiteExiste && !milieuExiste && gaucheExiste)
	{
		modeVirageGauche = true;
		r.decoincer(false, true, true);
	}
	else if(!droiteExiste && milieuExiste && !gaucheExiste)
	{
		modeLigneDroite = true;
		r.decoincer(true, true, true);
	}
	else if(!droiteExiste && milieuExiste && gaucheExiste)
	{
		if(gaucheForce)
		{
			modeVirageGauche = true;
			r.decoincer(false, true, true);
		}
		else
		{
			//choisir entre gauche et milieu, 50%, 50%
			uint8_t compteurTCNT1L = TCNT1L & 1;
			if(compteurTCNT1L == 1)
			{
				modeLigneDroite = true;
				r.decoincer(true, true, true);
			}
			else
			{
				modeVirageGauche = true;
				r.decoincer(false, true, true);
			}
		}
	}
	else if(droiteExiste && milieuExiste && !gaucheExiste)
	{
		
		if(droiteForce)
		{
			modeVirageDroite = true;
			r.decoincer(true, false, true);
		}
		else
		{
			//choisir entre droite et milieu,  50%, 50%
			uint8_t compteurTCNT1L = TCNT1L & 1;
			if(compteurTCNT1L == 1)
			{
				modeLigneDroite = true;
				r.decoincer(true, true, true);
			}
			else
			{
				modeVirageDroite = true;
				r.decoincer(true, false, true);
			}
		}

	}
	else if(droiteExiste && !milieuExiste && gaucheExiste)
	{
		if(droiteForce)
		{
			modeVirageDroite = true;
			r.decoincer(true, false, true);
		}
		else if(gaucheForce)
		{
			modeVirageGauche = true;
			r.decoincer(false, true, true);
		}
		else
		{
			//choisir entre droite et gauche,  50%, 50%
			uint8_t compteurTCNT1L = TCNT1L & 1;
			if(compteurTCNT1L == 1)
			{
				modeVirageGauche = true;
				r.decoincer(false, true, true);
			}
			else
			{
				modeVirageDroite = true;
				r.decoincer(true, false, true);
			}
		}
	}
	else
	{
		if(droiteForce)
		{
			modeVirageDroite = true;
			r.decoincer(true, false, true);
		}
		else if(gaucheForce)
		{
			modeVirageGauche = true;
			r.decoincer(false, true, true);
		}
		else
		{
			//Choisir entre les trois, 50%, 25%, 25%
			uint8_t compteurTCNT1L = TCNT1L & 3;
			if(compteurTCNT1L == 3 || compteurTCNT1L == 2)
			{
				modeLigneDroite = true;
				r.decoincer(true, true, true);
			}
			else if(compteurTCNT1L == 1)
			{
				modeVirageDroite = true;
				r.decoincer(true, false, true);
			}
			else
			{
				modeVirageGauche = true;
				r.decoincer(false, true, true);
			}
		}
	}
	desactiveLumiereForce(); //Eteindre la del et remmetre a 0 le choix forcé
}

bool virer(bool sens) //Retourne vrai si le virage est complet
{
	r.virer(vitesseVirage,ajustementGauche, ajustementDroit, sens);

	if(sens) //droite
	{	
		if(!capteurDroit()) //Vérifier si le capteur droit est éteint; être certain qu'on a quitter la ligne droite du milieu
			detecteurEnabled = true;

		if(capteurDroit() && detecteurEnabled) //Si le capteur droit est atteint et qu'il est enabled, alors on a fini de virer a droite
		{
			delaisAjustementTemporaire = dureeAjustementTournant;
			ajustementTemporaireG = -ajustementTournant;
			ajustementTemporaireD = ajustementTournant;
			return true;
		}

		return false;
	}
	else	//gauche
	{
		if(!capteurGauche()) //Vérifier si le capteur gauche est éteint; être certain qu'on a quitter la ligne droite du milieu
			detecteurEnabled = true;

		if(capteurGauche() && detecteurEnabled) //Si le capteur droit est atteint et qu'il est enabled, alors on a fini de virer a gauche
		{
			delaisAjustementTemporaire = dureeAjustementTournant;
			ajustementTemporaireG = ajustementTournant;
			ajustementTemporaireD = -ajustementTournant;
			return true;
		}

		return false;
	}
}

void avancerLigneDroite()
{	
	if(perdue())
	{
		 //On sait de quel coté on est partie, on essaie de retrouver la ligne
		if(dernierCapteur == 2) //Dernier capteur atteint est le millieu, continuer tout droit
			avancerAvecAjustement(vitesseBase,vitesseBase);
		else if(dernierCapteur == 1)  //gauche
			viragePourLigneDroite(false,ajustementVirageMoyen);
		else if(dernierCapteur == 3) 
			viragePourLigneDroite(true,ajustementVirageMoyen);

		ajusterDernierCapteur();	

	}
	else	//Au moins 1 capteur est actif
	{
		//Recentrer le robot si nécessaire
		if(capteurMilieu()) //Continuer tout droit
		{
			delaisLigneDroite = 0;
			avancerAvecAjustement(vitesseBase,vitesseBase);

			//On a retrouver le milieu, mais est-t-on droit?

			//On vient de la droite, puisque le dernier capteur était a gauche
			//On doit donc restabiliser le rebot, en tournant légerement vers la droite
			if(dernierCapteur == 1)
			{
				delaisAjustementTemporaire = dureeAjustementLigneDroite;
				ajustementTemporaireG = ajustementLigneDroite;
				ajustementTemporaireD = -ajustementLigneDroite;
			}
			else if(dernierCapteur == 3) //On vient de la gauche
			{
				delaisAjustementTemporaire = dureeAjustementLigneDroite;
				ajustementTemporaireG = -ajustementLigneDroite;
				ajustementTemporaireD = ajustementLigneDroite;
			}

		}
		else if(capteurGauche())//On doit avancer tout droit et le capteur Gauche est allumé, le rebot est donc trop a droite
		{
			//virer legerement a gauche
			viragePourLigneDroite(false,ajustementVirageLeger);
		}
		else if(capteurDroit())
		{
			//virer legerement a droite
			viragePourLigneDroite(true,ajustementVirageLeger);
		}

		ajusterDernierCapteur();//Se souvenir du dernier capteur actif
	}
}

bool reculer()
{
	//Reculer jusqu'à ce qu'on détecte une intersection ou que le temps actif soit suffisaemment élevé	

	ajusterDernierCapteur();//Se souvenir du dernier capteur actif
	
	if(finRecul)
	{
		tempsReculExtra +=10;
		if(tempsReculExtra>= tempsReculExtraMax)
			return true;
	}
	else
	{
		if(!perdue())
			tempsReculActif +=10;
		if(tempsReculActif >= tempsReculActifMax)
			finRecul = true;
	

		if(detecterIntersection())
			finRecul = true;
	}
	
	reculerAvecAjustement(vitesseReculer,vitesseReculer);
	return false;
}

void ajusterVitesseBatteries(bool plusVite) //Ajuster la vitesse des moteurs en fonction de la puissance des batteries
{
	//Ne pas faire d'ajustement si la vitesse min ou max est atteinte

	if(plusVite) //On doit aller plus vite
	{
		r.jouerSon(60);
		uint8_t nVitesse = vitesseBase + ajustementVitesseBaseBateries;
		if(nVitesse <= vitesseMax )
		{
			vitesseBase = nVitesse;
			vitesseVirage += ajustementVitesseVirageBateries;
			vitesseReculer += ajustementVitesseReculerBateries;
		}
	}
	else
	{
		r.jouerSon(80);
		uint8_t nVitesse = vitesseBase - ajustementVitesseBaseBateries;
		if(nVitesse >= vitesseMin )
		{
			vitesseBase = nVitesse;
			vitesseVirage -= ajustementVitesseVirageBateries;
			vitesseReculer -= ajustementVitesseReculerBateries;
		}
	}
}

void gestionIntersectionBatteries()
{
	//Uniquement fiable lorsqu'on va en ligne droite
	if(debutIntersectionBateries) //Deuxième intersection
	{
		debutIntersectionBateries = false;

		if(tempIntersectionBateries > tempIntersectionMaxBateries) //Le temps entre deux intersection fut trop long, on doit aller plus vite
		{
			ajusterVitesseBatteries(true);
		}
		else if(tempIntersectionBateries < tempIntersectionMaxBateries)
		{
			ajusterVitesseBatteries(false);
		}

		tempIntersectionBateries = 0;
	}
	else //Premiere intersection
	{
		debutIntersectionBateries = true;
		tempIntersectionBateries = 0;
	}
}

void ajusterTempsActifRecent()
{
	if(tempsLigneDroiteDepuisIntersection < tempsLigneDroiteActiveMax)
	{
		if(!perdue())	
			tempsLigneDroiteActive += 10;
		tempsLigneDroiteDepuisIntersection += 10;
	}
	else
	{	
		if(!perdue())
		{
			tempsLigneDroiteActive += 10;
			if(tempsLigneDroiteActive > tempsLigneDroiteActiveMax)
				tempsLigneDroiteActive = tempsLigneDroiteActiveMax;
		}
		else
		{
			if(tempsLigneDroiteActive <= 20)
				tempsLigneDroiteActive = 0;
			else
				tempsLigneDroiteActive -= 20;
		}
	}
}

void gestionDeplacementSouris()
{
	if(modeLigneDroite)
	{
		if(detecterIntersection())
		{	
			gestionIntersectionBatteries();
			tomberEnModerDetecterTypeIntersection(false);
			determinerTypeIntersection();
		}
		else
		{
			ajusterTempsActifRecent();
			tempsDepuisIntersection+=10;
			tempIntersectionBateries+=10;
			if(tempsDepuisIntersection >=tempsAttenteMaxIntersection) //Déclencher intersection manuelle
			{
				//Intersection manuelle, donc détecter si le temps actif recent est suffisaement élevé pour
				//qu'on ait le droit de continuer tout droit
				if(tempsLigneDroiteActive >= tempsLigneDroiteActiveSeuil)
				{
					tempsDepuisIntersection = 0;
					tempsLigneDroiteActive = 0;
					tempsLigneDroiteDepuisIntersection = 0;
					avancerLigneDroite();
				}
				else
				{
					modeLigneDroite = false;
					tomberEnModeReculer();
				}
				/*tomberEnModerDetecterTypeIntersection(true);
				determinerTypeIntersection();*/
			}
			else
			{
				avancerLigneDroite();
			}
		}
	}
	else if(modeIntersection)
	{
		if(determinerTypeIntersection())
		{
			r.arreterSon();
			modeIntersection = false;

			if(coteForce == 0)
				decisionVirage(false, false);
			else if(coteForce == 1)
				decisionVirage(true, false);
			else if(coteForce == 2)
				decisionVirage(false, true);
		}
		else
		{
			avancerLigneDroite(); //Continuer d'ajuster le déplacement
		}
	}
	else if(modeVirageDroite)
	{
		debutIntersectionBateries = false;
		if(virer(true))
		{
			modeVirageDroite = false;
			modeLigneDroite = true;
			dernierCapteur = 3; //Mettre le dernier virage comme étant celui de droite
		}
	}
	else if(modeVirageGauche)
	{
		debutIntersectionBateries = false;
		if(virer(false))
		{
			modeVirageGauche = false;
			modeLigneDroite = true;
			dernierCapteur = 1; //Mettre le dernier virage comme étant celui de gauche
		}
	}
	else if(modeReculer)
	{
		debutIntersectionBateries = false;
		if(reculer())
		{
			tomberEnModerDetecterTypeIntersection(true); //detection forcée
			determinerTypeIntersection();
		}
	}
}

void afficheLumiereCoteForce()
{
	//Gauche = vert, Droite = rouge

	r.eteindreDEL(portDEL, pinCouleur, pinCouleur2);
	if(coteForce == 1)
	{
		r.allumerDEL(portDEL, pinCouleur2);
	}
	else if(coteForce == 2)
	{
		r.allumerDEL(portDEL, pinCouleur);
	}
}

uint8_t getValeurLumiere()
{
	can capteurDroit;
	can capteurGauche;
	uint16_t valeurD = capteurDroit.lecture(1); 	// Garder seulement les 8 bits de poids faible.
	valeurD = valeurD >> 2;
	uint8_t valeur8D = (valeurD & 0x00FF);

	uint16_t valeurG = capteurGauche.lecture(0);
	valeurG = valeurG >> 2;
	uint8_t valeur8G = (valeurG & 0x00FF); 

	if(valeur8G < 235 && valeur8D < 235)
		return 0;

	if(valeur8G >= 235 && valeur8G > valeur8D)
		return 1;

	return 2;
}

void gestionLumiere()
{
	delaiLumiereCourrant++;
	if(delaiLumiereCourrant < delaiLumiereMax)
		return;

	delaiLumiereCourrant = 0;
	uint8_t lumiere = getValeurLumiere();
	if(lumiere > 0)
		coteForce = lumiere;
	afficheLumiereCoteForce();
}

int main()
{
	r.initialisation();
	r.debut();
	r.partirMinuterieSon(255); //Partir le timer pour les decision aléatoire

	//------------------------
	//Initialisation des ports
	//------------------------

	//LE son sur B2-3
	DDRB = 0xff; // sortie, del

	DDRC = 0xff; // sortie, son

	DDRA = 0x00; // Entree, capteur ligne	

	DDRD = 0xff; // sortie, moteurs

	//------------------------
	//Initialisation variables globales
	//------------------------

	//var virage
		vitesseVirage = 95; //120, 100, 95
		detecteurEnabled = false;

	//Var intersection
		modeLigneDroite = true;
		modeIntersection = false;
		modeVirageGauche = false;
		modeVirageDroite = false;
		modeReculer = false;

		franchieGauche = false;
		franchieMilieu = false;
		franchieDroite = false;

		tempsIntersection = 0;
		tempsIntersectionMax = 700;

		tempsDepuisIntersection = 0;
		tempsAttenteMaxIntersection = 2500; //2250

		virageForce = false;

	//Var ligne droite
		dernierCapteur = 2;
		vitesseBase = 110; //130
		ajustementGauche = 0;
		ajustementDroit = 0;
		ajustementVirageLeger = 10;
		ajustementVirageMoyen = 20;
		ajustementMax = 8;
		ajustementMin = ajustementMax * -1;
		ajustementRetour = 1;
		delaisLigneDroite = 0;
		delaisMaxLigneDroite = 50;

	//Var ajustement
		delaisAjustementTemporaire = 0;
		ajustementTournant = 10;
		ajustementLigneDroite = 2;
		dureeAjustementTournant = 80;
		dureeAjustementLigneDroite = 150;

	//Var reculer
		vitesseReculer = 110;//130
		tempsReculActif = 0;
		tempsReculActifMax = 100;
		tempsReculExtra = 0;
		tempsReculExtraMax = 50;

	//Var batteries
		debutIntersectionBateries = false;
		tempIntersectionBateries = 0;
		tempIntersectionMaxBateries = 2750; //Si le temps d'intersection ne se situe pas entre ces deux valeurs,
		tempIntersectionMinBateries = 2250; //la vitesse du robot sera ajusté
		ajustementVitesseBaseBateries = 4; //8
		ajustementVitesseVirageBateries = 3; //6
		ajustementVitesseReculerBateries = 4; //8
		vitesseMin = 100; //95
		vitesseMax = 150; //130
		
	//Var lumières
		seuilEclaire = 235;
		coteForce = 0;
		delaiLumiereMax = 10;
		delaiLumiereCourrant = 0;

	//Var tomber
		tempsLigneDroiteActive = 0;
		tempsLigneDroiteDepuisIntersection = 0;
		tempsLigneDroiteActiveMax = 250; //On regarde le temps actif sur les dernieres 250 ms
		tempsLigneDroiteActiveSeuil = 140; //Seuil a atteindre pour continuer tout droit, sans quoi on recule
		

	//------------------------
	//Boucle de déplacement
	//------------------------

	while(true)
	{	
		gestionDeplacementSouris();
		gestionLumiere();
		_delay_ms(10);
	}


	return 0;
}

