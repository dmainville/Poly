/****************************************************************************
 * Fichier: libRobot.cpp
 * Auteur: Yannick Ouellet, David Mainville, Mario Saliby, Youssef ZEMMAHI
 * Date: 24 Ocotbre 2013
 * DESCRIPTION : Lib pour le robot
 ****************************************************************************/

/* Information sur branchements */
/* Port B0 branché sur +        */
/* Port B1 branché sur -        */

#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "libRobot.h"

#define BOUTON_ENFONCE (PIND & _BV(2))


LibRobot::LibRobot(){}
LibRobot::~LibRobot(){}

// Fonction pour vérifier l'état du bouton en prenant compte du rebond
uint8_t LibRobot::BoutonEstEnfonce()
{ 
  //Require -- DDRB = 0xff; // PORT B est en mode sortie.
  
    if(BOUTON_ENFONCE)
    {
        // Anti-Rebond
        _delay_ms(10);
        // Revérification du bouton suite au delais pour s'assurer de sa valeur

        // l'operateur !! permet de transformer une valeur quelconque en 0 ou 1.
        // ie: BOUTON_ENFONCE renvoit 2, !!2 = 1.
        return !!BOUTON_ENFONCE;
    }
    // Le bouton n'est pas enfoncé
    return 0;
}

void LibRobot::attenuerDEL(bool rouge){
  
  /* Information sur branchements */
  /* Port B0 branché sur +        */
  /* Port B1 branché sur -        */
  
  //Require -- DDRB = 0xff; // PORT B est en mode sortie.
  
  const uint16_t dureeOperation = 1000; //en us
  const uint16_t nbOperation = 1000; //1000 operations seconde
  
  for(uint16_t j = 0; j< nbOperation; j++)
  {
      for(uint8_t i =0; i< 3; i++)
      {
	  uint16_t attenteAllumee = dureeOperation-j; //en micro seconde
	  uint16_t attenteEteint = dureeOperation-attenteAllumee;    

	  if(rouge)
	      PORTB = _BV(PORTB0); //Rouge
	  else
	      PORTB = _BV(PORTB1); //Vert
	      
	  _delay_loop_2(attenteAllumee*2+1);
	  
	  PORTB = 0x0;
	  _delay_loop_2(attenteEteint*2+1);
      }
    
  }
  
}

void LibRobot::tournerRoue(uint16_t a, uint16_t b,bool sens, uint8_t port)
{
    	//ex b = 16667, a = 16667 >> 1 --> un pwm 50% de 1/60 seconde de duree
	//sens, if true -> avancer sinon reculer 

    	uint16_t attenteEteint = b - a;

	if(sens)
		affectePort(port, getPort(port,1));		//PORTX = _BV(PORTX1), reculer
	else
		affectePort(port,0); 				//PORTX = 0x0, avancer

	ajoutePort(port,getPort(port,0)); 	//PORTX |= _BV(PORTX0)
	_delay_loop_2((a<<1)+1);

	affectePort(port,0); 					//PORTX = 0x0
	_delay_loop_2((attenteEteint<<1)+1);
}

void LibRobot::testRoue(uint16_t a, uint16_t b, uint8_t port)
{
    //ex b = 16667, a = 16667 >> 1 --> un pwm 50% de 1/60 seconde de duree
 
    affectePort(1,getPort(1,1));
    
    uint16_t attenteEteint = b - a;

    //PORTC = 0x0;
    affectePort(2,0x0);
    for(uint8_t i =0; i< 2; i++)
    {
	affectePort(2, getPort(2,0));
	//PORTC = _BV(PORTC0);
	_delay_loop_2((a<<1)+1);
	
	affectePort(2,0x0);
	//PORTC = 0x0;
	_delay_loop_2((attenteEteint<<1)+1);
    }
    affectePort(2,0x0);
    //PORTC = 0x0;
}

void LibRobot::affectePort(uint8_t port, uint16_t valeur)
{
    //port == 0 --> portA
    //port == 1 --> portB
    //port == 2 --> portC
    //port == 3 --> portD
  
    if(port == 0)
    {
	PORTA = valeur;
    }
    else if(port == 1)
    {
	PORTB = valeur;
    }
    else if(port == 2)
    {
	PORTC = valeur;
    }
    else if(port == 3)
    {
	PORTD = valeur;
    }
}

void LibRobot::ajoutePort(uint8_t port, uint16_t valeur)
{
    //port == 0 --> portA	else
	{
	    
	}
    //port == 1 --> portB
    //port == 2 --> portC
    //port == 3 --> portD
  
    if(port == 0)
    {
	PORTA |= valeur;
    }
    else if(port == 1)
    {
	PORTB |= valeur;
    }
    else if(port == 2)
    {
	PORTC |= valeur;
    }
    else if(port == 3)
    {
	PORTD |= valeur;
    }
}

uint16_t LibRobot::getPort(uint8_t port, uint8_t numPort)
{
    //port == 0 --> portA
    //port == 1 --> portB
    //port == 2 --> portC
    //port == 3 --> portD
  
    //numPort == 0 -->portX0
    //numPort == 1 -->portX1...
  
    if(port == 0)
    {
	if(numPort == 0)
	  return _BV(PORTA0);
	if(numPort == 1)
	  return _BV(PORTA1);
	if(numPort == 2)
	  return _BV(PORTA2);
	if(numPort == 3)
	  return _BV(PORTA3);
	if(numPort == 4)
	  return _BV(PORTA4);
	if(numPort == 5)
	  return _BV(PORTA5);
	if(numPort == 6)
	  return _BV(PORTA6);
	if(numPort == 7)
	  return _BV(PORTA7);
    }
    else if(port == 1)
    {
	if(numPort == 0)
	  return _BV(PORTB0);
	if(numPort == 1)
	  return _BV(PORTB1);
	if(numPort == 2)
	  return _BV(PORTB2);
	if(numPort == 3)
	  return _BV(PORTB3);
	if(numPort == 4)
	  return _BV(PORTB4);
	if(numPort == 5)
	  return _BV(PORTB5);
	if(numPort == 6)
	  return _BV(PORTB6);
	if(numPort == 7)
	  return _BV(PORTB7);
    }
    else if(port == 2)
    {
	if(numPort == 0)
	  return _BV(PORTC0);
	if(numPort == 1)
	  return _BV(PORTC1);
	if(numPort == 2)
	  return _BV(PORTC2);
	if(numPort == 3)
	  return _BV(PORTC3);
	if(numPort == 4)
	  return _BV(PORTC4);
	if(numPort == 5)
	  return _BV(PORTC5);
	if(numPort == 6)
	  return _BV(PORTC6);
	if(numPort == 7)
	  return _BV(PORTC7);
    }
    else if(port == 3)
    {
	if(numPort == 0)
	  return _BV(PORTD0);
	if(numPort == 1)
	  return _BV(PORTD1);
	if(numPort == 2)
	  return _BV(PORTD2);
	if(numPort == 3)
	  return _BV(PORTD3);
	if(numPort == 4)
	  return _BV(PORTD4);
	if(numPort == 5)
	  return _BV(PORTD5);
	if(numPort == 6)
	  return _BV(PORTD6);
	if(numPort == 7)
	  return _BV(PORTD7);
    }
    
    return 0;
}



