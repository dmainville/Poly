/****************************************************************************
 * Fichier: TP3_ex1.cpp
 * Auteur: Yannick OUellet et David Mainville
 * Date: 16 Septembre 2013
 * DESCRIPTION : Activation de LED ambrée avec bouton.
 ****************************************************************************/

//TODO
//Modifier le delay quand b change
//Ajuster la vitesse en fonction d'une valeur de 0 a 255 (probleme avec les vigules)

/* Information sur branchements */
/* Port B0 branché sur +        */
/* Port B1 branché sur -        */

// F_CPU permet de définir la vitesse du micro-controleur soit 8MHz
#define F_CPU 8000000UL
#include <avr/io.h>
#include <util/delay.h>
#include "lib/libRobot.h"
#include "memoire_24.h"


int main()
{
	LibRobot r;
	r.initialisation();

	//LE son sur B2-3
	DDRB = 0xff; // sortie

	//LED sur le A
	DDRA = 0xff; // sortie	
	volatile uint8_t& portDEL = PORTA;
	uint8_t pinCouleur = _BV(PORTA0);
	uint8_t pinCouleur2 = _BV(PORTA1);

	//Moteur droit sur le C
	volatile uint8_t& portMoteurD = PORTC;
	r.pinEnableD = _BV(PORTC2);
	r.pinSensD = _BV(PORTC3);

	//Moteur gauche sur le C
	DDRC = 0xff; // sortie
	volatile uint8_t& portMoteurG = PORTC;
	r.pinEnableG = _BV(PORTC0);
	r.pinSensG = _BV(PORTC1);

	//Bouton Poussoir
	DDRD = 0x00; // entree
	
	//Periode
	uint16_t b = 16667;

	//Mémoire
	Memoire24CXXX mem = Memoire24CXXX();
	uint8_t* donnee;
	uint8_t instruction=0x00;
	uint8_t operande;
	
	uint16_t derniereBoucle = 0;

	//test
	//bool temp = true;
	//uint16_t operation = 0;

	for (  uint16_t i=0; instruction!=0xFF; i+=2 )
  	{
		mem.lecture(i,donnee);
		instruction=*donnee;

		// lire l'operande de la memoire
		mem.lecture(i+1,donnee);
		operande=*donnee;
		
		if(r.nb_delai <= 0)
		{
			switch (instruction)
			{
				case 0x01:
				{
					r.debut();
					break;
				}
				case 0x02 :
				{
					r.attendre(operande);
					break;
				}
				case 0x44:
				{
					r.allumerDEL(portDEL,pinCouleur);
					break;
				}
				case 0x45:
				{
					r.eteindreDEL(portDEL,pinCouleur,pinCouleur2);
					break;
				}
				case 0x48:
				{
					r.jouerSon(operande);
					break;
				}
				case 0x09:
				{
					r.arreterSon();
					break;
				}
				case 0x60:
				case 0x61:
				{
					r.arreterMoteurs();
					break;
				}
				case 0x62:
				{
					r.avancer(b,operande);
					break;
				}
				case 0x63:
				{
					r.reculer(b,operande);
					 break;
				}
				case 0x64:
				{
					r.tournerDroite90(b);
					break;
				}
				case 0x65:
				{
					r.tournerGauche90(b);
					break;
				}
				case 0xA0:
				{
					r.debutBoucle(operande);
					derniereBoucle = i;
					break;
				}
				case 0xA1:
				{
					if(r.finDeBoucle)//Besoin de retourner a debut de boucle
						i = derniereBoucle;
					break;
				}
			}
		}
		else
		{
		   i--;
		}


		if(r.fin_)
			return 0;
		
		if(r.debut_)
		{
			r.gestionMoteurs(b,portMoteurD,portMoteurG);
			r.gestionDelaiArret(b);
			r.gestionAttente(b);
		}
	}
		
	/*if(temp)
	{
		PORTB = 0x00;
		PORTA = _BV(PORTA0);
		PORTB = _BV(PORTB1);
		PORTB |= _BV(PORTB3);
		r.debut();
		//r.avancer(b,255);
		r.reculer(b,255);
		temp = false;
	}*/
	
	/* while(true)
	{
	   

	   
	   if(r.nb_attente <= 0)
	   {
	      if(operation < 100)
		  operation++;
	     
	      if(operation == 1)
	      {
		  r.debut();
		  r.allumerDEL(portDEL,pinCouleur);
		  r.attendre(80); //2 secondes
	      }
	      else if(operation == 2)
	      {
		  r.eteindreDEL(portDEL,pinCouleur,pinCouleur2);
		  r.attendre(80); //2 secondes
		  r.avancer(b,255);
	      }
	   }
	    
	   
	   if(r.debut_)
	   {
	      r.gestionMoteurs(b,portMoteurD,portMoteurG);
	      r.gestionDelaiArret(b);
	      r.gestionAttente(b);
	   }
	}*/

	return 0;
}
