GAS LISTING /tmp/ccO8I6SS.s 			page 1


   1               		.file	"libRobot.cpp"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.stabs	"/usagers/damaib/Documents/Session3/inf1995/inf1995-20/tp/tp8/Lib/",100,0,4,.Ltext0
   8               		.stabs	"libRobot.cpp",100,0,4,.Ltext0
   9               		.text
  10               	.Ltext0:
  11               		.stabs	"gcc2_compiled.",60,0,0,0
  12               		.stabs	"__uint24:t(0,1)=@s24;r(0,1);0;077777777;",128,0,0,0
  13               		.stabs	"__int24:t(0,2)=@s24;r(0,2);040000000;037777777;",128,0,0,0
  14               		.stabs	"__builtin_va_list:t(0,3)=*(0,4)=(0,4)",128,0,0,0
  15               		.stabs	"complex long double:t(0,5)=R3;8;0;",128,0,0,0
  16               		.stabs	"complex double:t(0,6)=R3;8;0;",128,0,0,0
  17               		.stabs	"complex float:t(0,7)=R3;8;0;",128,0,0,0
  18               		.stabs	"complex int:t(0,8)=s4real:(0,9)=r(0,9);-32768;32767;,0,16;imag:(0,9),16,16;;",128,0,0,0
  19               		.stabs	"long long unsigned int:t(0,10)=@s64;r(0,10);0;01777777777777777777777;",128,0,0,0
  20               		.stabs	"long unsigned int:t(0,11)=@s32;r(0,11);0;037777777777;",128,0,0,0
  21               		.stabs	"unsigned int:t(0,12)=r(0,12);0;0177777;",128,0,0,0
  22               		.stabs	"unsigned char:t(0,13)=@s8;r(0,13);0;255;",128,0,0,0
  23               		.stabs	"long long int:t(0,14)=@s64;r(0,14);01000000000000000000000;0777777777777777777777;",128,0,
  24               		.stabs	"long int:t(0,15)=@s32;r(0,15);020000000000;017777777777;",128,0,0,0
  25               		.stabs	"int:t(0,9)",128,0,0,0
  26               		.stabs	"signed char:t(0,16)=@s8;r(0,16);-128;127;",128,0,0,0
  27               		.stabs	"char:t(0,17)=@s8;r(0,17);0;255;",128,0,0,0
  28               		.stabs	"signed:t(0,9)",128,0,0,0
  29               		.stabs	"unsigned long:t(0,11)",128,0,0,0
  30               		.stabs	"long long unsigned:t(0,10)",128,0,0,0
  31               		.stabs	"short int:t(0,18)=r(0,18);-32768;32767;",128,0,0,0
  32               		.stabs	"short unsigned int:t(0,19)=r(0,19);0;0177777;",128,0,0,0
  33               		.stabs	"unsigned short:t(0,19)",128,0,0,0
  34               		.stabs	"float:t(0,20)=r(0,9);4;0;",128,0,0,0
  35               		.stabs	"double:t(0,21)=r(0,9);4;0;",128,0,0,0
  36               		.stabs	"long double:t(0,22)=r(0,9);4;0;",128,0,0,0
  37               		.stabs	"void:t(0,4)",128,0,0,0
  38               		.stabs	"wchar_t:t(0,23)=r(0,23);-32768;32767;",128,0,0,0
  39               		.stabs	"bool:t(0,24)=@s8;-16;",128,0,0,0
  40               		.stabs	"__vtbl_ptr_type:t(0,25)=*(0,26)=f(0,9)",128,0,0,0
  41               		.stabs	"decltype(nullptr):t(0,27)=(0,27)",128,0,0,0
  42               		.stabs	"int8_t:t(0,28)=(0,16)",128,0,121,0
  43               		.stabs	"uint8_t:t(0,29)=(0,13)",128,0,122,0
  44               		.stabs	"int16_t:t(0,30)=(0,9)",128,0,123,0
  45               		.stabs	"uint16_t:t(0,31)=(0,12)",128,0,124,0
  46               		.stabs	"int32_t:t(0,32)=(0,15)",128,0,125,0
  47               		.stabs	"uint32_t:t(0,33)=(0,11)",128,0,126,0
  48               		.stabs	"int64_t:t(0,34)=(0,14)",128,0,128,0
  49               		.stabs	"uint64_t:t(0,35)=(0,10)",128,0,129,0
  50               		.stabs	"intptr_t:t(0,36)=(0,30)",128,0,142,0
  51               		.stabs	"uintptr_t:t(0,37)=(0,31)",128,0,147,0
  52               		.stabs	"int_least8_t:t(0,38)=(0,28)",128,0,159,0
  53               		.stabs	"uint_least8_t:t(0,39)=(0,29)",128,0,164,0
  54               		.stabs	"int_least16_t:t(0,40)=(0,30)",128,0,169,0
  55               		.stabs	"uint_least16_t:t(0,41)=(0,31)",128,0,174,0
  56               		.stabs	"int_least32_t:t(0,42)=(0,32)",128,0,179,0
  57               		.stabs	"uint_least32_t:t(0,43)=(0,33)",128,0,184,0
GAS LISTING /tmp/ccO8I6SS.s 			page 2


  58               		.stabs	"int_least64_t:t(0,44)=(0,34)",128,0,192,0
  59               		.stabs	"uint_least64_t:t(0,45)=(0,35)",128,0,199,0
  60               		.stabs	"int_fast8_t:t(0,46)=(0,28)",128,0,213,0
  61               		.stabs	"uint_fast8_t:t(0,47)=(0,29)",128,0,218,0
  62               		.stabs	"int_fast16_t:t(0,48)=(0,30)",128,0,223,0
  63               		.stabs	"uint_fast16_t:t(0,49)=(0,31)",128,0,228,0
  64               		.stabs	"int_fast32_t:t(0,50)=(0,32)",128,0,233,0
  65               		.stabs	"uint_fast32_t:t(0,51)=(0,33)",128,0,238,0
  66               		.stabs	"int_fast64_t:t(0,52)=(0,34)",128,0,246,0
  67               		.stabs	"uint_fast64_t:t(0,53)=(0,35)",128,0,253,0
  68               		.stabs	"intmax_t:t(0,54)=(0,34)",128,0,273,0
  69               		.stabs	"uintmax_t:t(0,55)=(0,35)",128,0,278,0
  70               		.stabs	"int_farptr_t:t(0,56)=(0,32)",128,0,77,0
  71               		.stabs	"uint_farptr_t:t(0,57)=(0,33)",128,0,81,0
  72               		.stabs	"._0:Tt(0,58)=s3low:(0,13),0,8;high:(0,13),8,8;extended:(0,13),16,8;;",128,0,240,0
  73               		.stabs	"__fuse_t:t(0,58)",128,0,244,0
  74               		.stabs	"LibRobot:Tt(0,59)=s1__base_ctor ::(0,60)=#(0,59),(0,4),(0,61)=*(0,59),(0,4);:_ZN8LibRobotC
  75               		.stabs	"_ZN8LibRobotC2Ev:F(0,4)",36,0,22,_ZN8LibRobotC2Ev
  76               		.stabs	"this:P(0,65)=k(0,61)",64,0,22,24
  77               	.global	_ZN8LibRobotC2Ev
  78               		.type	_ZN8LibRobotC2Ev, @function
  79               	_ZN8LibRobotC2Ev:
  80               		.stabd	46,0,0
   1:libRobot.cpp  **** /****************************************************************************
   2:libRobot.cpp  ****  * Fichier: libRobot.cpp
   3:libRobot.cpp  ****  * Auteur: Yannick Ouellet, David Mainville, Mario Saliby, Youssef ZEMMAHI
   4:libRobot.cpp  ****  * Date: 24 Ocotbre 2013
   5:libRobot.cpp  ****  * DESCRIPTION : Lib pour le robot
   6:libRobot.cpp  ****  ****************************************************************************/
   7:libRobot.cpp  **** 
   8:libRobot.cpp  **** /* Information sur branchements */
   9:libRobot.cpp  **** /* Port B0 branché sur +        */
  10:libRobot.cpp  **** /* Port B1 branché sur -        */
  11:libRobot.cpp  **** 
  12:libRobot.cpp  **** #define F_CPU 8000000UL
  13:libRobot.cpp  **** #include <avr/io.h>
  14:libRobot.cpp  **** #include <util/delay.h>
  15:libRobot.cpp  **** #include <avr/interrupt.h>
  16:libRobot.cpp  **** #include "libRobot.h"
  17:libRobot.cpp  **** 
  18:libRobot.cpp  **** 
  19:libRobot.cpp  **** #define BOUTON_ENFONCE (PIND & _BV(2))
  20:libRobot.cpp  **** 
  21:libRobot.cpp  **** 
  22:libRobot.cpp  **** LibRobot::LibRobot(){}
  81               		.stabn	68,0,22,.LM0-.LFBB1
  82               	.LM0:
  83               	.LFBB1:
  84               	/* prologue: function */
  85               	/* frame size = 0 */
  86               	/* stack size = 0 */
  87               	.L__stack_usage = 0
  88 0000 0895      		ret
  89               		.size	_ZN8LibRobotC2Ev, .-_ZN8LibRobotC2Ev
  90               	.Lscope1:
  91               		.stabs	"",36,0,0,.Lscope1-.LFBB1
  92               		.stabd	78,0,0
GAS LISTING /tmp/ccO8I6SS.s 			page 3


  93               	.global	_ZN8LibRobotC1Ev
  94               		.set	_ZN8LibRobotC1Ev,_ZN8LibRobotC2Ev
  95               		.stabs	"_ZN8LibRobotD2Ev:F(0,4)",36,0,24,_ZN8LibRobotD2Ev
  96               		.stabs	"this:P(0,65)",64,0,24,24
  97               	.global	_ZN8LibRobotD2Ev
  98               		.type	_ZN8LibRobotD2Ev, @function
  99               	_ZN8LibRobotD2Ev:
 100               		.stabd	46,0,0
  23:libRobot.cpp  **** 
  24:libRobot.cpp  **** LibRobot::~LibRobot(){}
 101               		.stabn	68,0,24,.LM1-.LFBB2
 102               	.LM1:
 103               	.LFBB2:
 104               	/* prologue: function */
 105               	/* frame size = 0 */
 106               	/* stack size = 0 */
 107               	.L__stack_usage = 0
 108 0002 0895      		ret
 109               		.size	_ZN8LibRobotD2Ev, .-_ZN8LibRobotD2Ev
 110               	.Lscope2:
 111               		.stabs	"",36,0,0,.Lscope2-.LFBB2
 112               		.stabd	78,0,0
 113               	.global	_ZN8LibRobotD1Ev
 114               		.set	_ZN8LibRobotD1Ev,_ZN8LibRobotD2Ev
 115               		.stabs	"_ZN8LibRobot16BoutonEstEnfonceEv:F(0,29)",36,0,27,_ZN8LibRobot16BoutonEstEnfonceEv
 116               	.global	_ZN8LibRobot16BoutonEstEnfonceEv
 117               		.type	_ZN8LibRobot16BoutonEstEnfonceEv, @function
 118               	_ZN8LibRobot16BoutonEstEnfonceEv:
 119               		.stabd	46,0,0
  25:libRobot.cpp  **** 
  26:libRobot.cpp  **** // Fonction pour vérifier l'état du bouton en prenant compte du rebond
  27:libRobot.cpp  **** uint8_t LibRobot::BoutonEstEnfonce()
  28:libRobot.cpp  **** { 
 120               		.stabn	68,0,28,.LM2-.LFBB3
 121               	.LM2:
 122               	.LFBB3:
 123               	/* prologue: function */
 124               	/* frame size = 0 */
 125               	/* stack size = 0 */
 126               	.L__stack_usage = 0
  29:libRobot.cpp  ****   //Require -- DDRB = 0xff; // PORT B est en mode sortie.
  30:libRobot.cpp  ****   
  31:libRobot.cpp  ****     if(BOUTON_ENFONCE)
 127               		.stabn	68,0,31,.LM3-.LFBB3
 128               	.LM3:
 129 0004 4A9B      		sbis 0x9,2
 130 0006 00C0      		rjmp .L6
 131               	.LBB20:
 132               	.LBB21:
 133               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h",132,0,0,.Ltext1
 134               	.Ltext1:
   1:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    All rights reserved.
   5:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
   6:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Redistribution and use in source and binary forms, with or without
GAS LISTING /tmp/ccO8I6SS.s 			page 4


   7:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    modification, are permitted provided that the following conditions are met:
   8:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
   9:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Redistributions of source code must retain the above copyright
  10:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer.
  11:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  12:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      notice, this list of conditions and the following disclaimer in
  14:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      the documentation and/or other materials provided with the
  15:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      distribution.
  16:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  17:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    * Neither the name of the copyright holders nor the names of
  18:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      contributors may be used to endorse or promote products derived
  19:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****      from this software without specific prior written permission.
  20:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  21:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  33:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* $Id: delay.h.in 2251 2011-09-14 08:20:33Z joerg_wunsch $ */
  34:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  35:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef _UTIL_DELAY_H_
  36:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #define _UTIL_DELAY_H_ 1
  37:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  38:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #define __HAS_DELAY_CYCLES 1
  40:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  41:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  42:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <inttypes.h>
  43:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <util/delay_basic.h>
  44:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #include <math.h>
  45:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  46:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /** \file */
  47:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \code
  49:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     //#define F_CPU 14.7456E6
  51:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     #include <util/delay.h>
  52:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \endcode
  53:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  54:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \note As an alternative method, it is possible to pass the
  55:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     used.
  58:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  59:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     The functions in this header file are wrappers around the basic
  60:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     convenience functions where actual time values can be specified
  62:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     that compile-time constant expressions will be eliminated by
GAS LISTING /tmp/ccO8I6SS.s 			page 5


  64:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     compiler optimization so floating-point expressions can be used
  65:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     frequency passed by the macro F_CPU.
  67:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  68:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     \note In order for these functions to work as intended, compiler
  69:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     <em>must</em> be an expression that is a known constant at
  71:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     delay will be much longer (and basically unpredictable), and
  73:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     applications that otherwise do not use floating-point calculations
  74:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     will experience severe code bloat by the floating-point library
  75:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     routines linked into the application.
  76:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  77:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     The functions available allow the specification of microsecond, and
  78:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     millisecond delays directly, using the application-supplied macro
  79:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  81:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** */
  82:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  83:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if !defined(__DOXYGEN__)
  84:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  87:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  88:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef F_CPU
  89:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /* prevent compiler error by supplying a default */
  90:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # define F_CPU 1000000UL
  92:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  93:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  94:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #ifndef __OPTIMIZE__
  95:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
  97:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
  98:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 101:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #  include <math.h>
 102:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #endif
 103:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 104:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** /**
 105:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    \ingroup util_delay
 106:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 107:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 109:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    The macro F_CPU is supposed to be defined to a
 110:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 112:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 114:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    When the user request delay which exceed the maximum possible one,
 115:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    user will not be informed about decreased resolution.
 119:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 120:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
GAS LISTING /tmp/ccO8I6SS.s 			page 6


 121:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    values greater than the maximal possible delay, overflows results in
 123:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    no delay i.e., 0ms.
 124:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 125:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    the user gets atleast __us microseconds of delay.
 128:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 129:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    to round down and round to closest integer.
 131:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 132:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    Also, the backward compatible
 136:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****    required for rounding are not available to the compiler then.
 139:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 140:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****  */
 141:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** void
 142:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** _delay_ms(double __ms)
 143:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** {
 144:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	uint16_t __ticks;
 145:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	double __tmp ; 
 146:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 147:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 148:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h ****   __STDC_HOSTED__
 149:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	uint32_t __ticks_dc;
 150:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 151:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 152:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 153:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 154:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 155:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 156:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 157:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 158:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 159:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#else
 160:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		//round up by default
 161:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 162:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	#endif
 163:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 
 164:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 135               		.stabn	68,0,164,.LM4-.LFBB3
 136               	.LM4:
 137 0008 8FE1      		ldi r24,lo8(19999)
 138 000a 9EE4      		ldi r25,hi8(19999)
 139 000c 0197      		1: sbiw r24,1
 140 000e 01F4      		brne 1b
 141 0010 00C0      		rjmp .
 142 0012 0000      		nop
 143               	.LBE21:
 144               	.LBE20:
 145               		.stabs	"libRobot.cpp",132,0,0,.Ltext2
 146               	.Ltext2:
  32:libRobot.cpp  ****     {
GAS LISTING /tmp/ccO8I6SS.s 			page 7


  33:libRobot.cpp  ****         // Anti-Rebond
  34:libRobot.cpp  ****         _delay_ms(10);
  35:libRobot.cpp  ****         // Revérification du bouton suite au delais pour s'assurer de sa valeur
  36:libRobot.cpp  **** 
  37:libRobot.cpp  ****         // l'operateur !! permet de transformer une valeur quelconque en 0 ou 1.
  38:libRobot.cpp  ****         // ie: BOUTON_ENFONCE renvoit 2, !!2 = 1.
  39:libRobot.cpp  ****         return !!BOUTON_ENFONCE;
 147               		.stabn	68,0,39,.LM5-.LFBB3
 148               	.LM5:
 149 0014 89B1      		in r24,0x9
 150 0016 82FB      		bst r24,2
 151 0018 8827      		clr r24
 152 001a 80F9      		bld r24,0
 153 001c 0895      		ret
 154               	.L6:
  40:libRobot.cpp  ****     }
  41:libRobot.cpp  ****     // Le bouton n'est pas enfoncé
  42:libRobot.cpp  ****     return 0;
 155               		.stabn	68,0,42,.LM6-.LFBB3
 156               	.LM6:
 157 001e 80E0      		ldi r24,0
  43:libRobot.cpp  **** }
 158               		.stabn	68,0,43,.LM7-.LFBB3
 159               	.LM7:
 160 0020 0895      		ret
 161               		.size	_ZN8LibRobot16BoutonEstEnfonceEv, .-_ZN8LibRobot16BoutonEstEnfonceEv
 162               	.Lscope3:
 163               		.stabs	"",36,0,0,.Lscope3-.LFBB3
 164               		.stabd	78,0,0
 165               		.stabs	"_ZN8LibRobot11attenuerDELEb:F(0,4)",36,0,45,_ZN8LibRobot11attenuerDELEb
 166               		.stabs	"rouge:P(0,24)",64,0,45,24
 167               	.global	_ZN8LibRobot11attenuerDELEb
 168               		.type	_ZN8LibRobot11attenuerDELEb, @function
 169               	_ZN8LibRobot11attenuerDELEb:
 170               		.stabd	46,0,0
  44:libRobot.cpp  **** 
  45:libRobot.cpp  **** void LibRobot::attenuerDEL(bool rouge){
 171               		.stabn	68,0,45,.LM8-.LFBB4
 172               	.LM8:
 173               	.LFBB4:
 174               	/* prologue: function */
 175               	/* frame size = 0 */
 176               	/* stack size = 0 */
 177               	.L__stack_usage = 0
 178               	.LBB22:
 179               	.LBB23:
 180               	.LBB24:
 181               	.LBB25:
  46:libRobot.cpp  ****   
  47:libRobot.cpp  ****   /* Information sur branchements */
  48:libRobot.cpp  ****   /* Port B0 branché sur +        */
  49:libRobot.cpp  ****   /* Port B1 branché sur -        */
  50:libRobot.cpp  ****   
  51:libRobot.cpp  ****   //Require -- DDRB = 0xff; // PORT B est en mode sortie.
  52:libRobot.cpp  ****   
  53:libRobot.cpp  ****   const uint16_t dureeOperation = 1000; //en us
  54:libRobot.cpp  ****   const uint16_t nbOperation = 1000; //1000 operations seconde
GAS LISTING /tmp/ccO8I6SS.s 			page 8


  55:libRobot.cpp  ****   
  56:libRobot.cpp  ****   for(uint16_t j = 0; j< nbOperation; j++)
  57:libRobot.cpp  ****   {
  58:libRobot.cpp  ****       for(uint8_t i =0; i< 3; i++)
  59:libRobot.cpp  ****       {
  60:libRobot.cpp  **** 	  uint16_t attenteAllumee = dureeOperation-j; //en micro seconde
  61:libRobot.cpp  **** 	  uint16_t attenteEteint = dureeOperation-attenteAllumee;    
  62:libRobot.cpp  **** 
  63:libRobot.cpp  **** 	  if(rouge)
  64:libRobot.cpp  **** 	      PORTB = _BV(PORTB0); //Rouge
  65:libRobot.cpp  **** 	  else
  66:libRobot.cpp  **** 	      PORTB = _BV(PORTB1); //Vert
  67:libRobot.cpp  **** 	      
  68:libRobot.cpp  **** 	  _delay_loop_2(attenteAllumee*2+1);
  69:libRobot.cpp  **** 	  
  70:libRobot.cpp  **** 	  PORTB = 0x0;
  71:libRobot.cpp  **** 	  _delay_loop_2(attenteEteint*2+1);
 182               		.stabn	68,0,71,.LM9-.LFBB4
 183               	.LM9:
 184 0022 21ED      		ldi r18,lo8(-47)
 185 0024 37E0      		ldi r19,lo8(7)
 186 0026 62ED      		ldi r22,lo8(-46)
 187 0028 77E0      		ldi r23,lo8(7)
  66:libRobot.cpp  **** 	      PORTB = _BV(PORTB1); //Vert
 188               		.stabn	68,0,66,.LM10-.LFBB4
 189               	.LM10:
 190 002a A2E0      		ldi r26,lo8(2)
  64:libRobot.cpp  **** 	      PORTB = _BV(PORTB0); //Rouge
 191               		.stabn	68,0,64,.LM11-.LFBB4
 192               	.LM11:
 193 002c B1E0      		ldi r27,lo8(1)
 194 002e 00C0      		rjmp .L8
 195               	.L11:
  63:libRobot.cpp  **** 	  if(rouge)
 196               		.stabn	68,0,63,.LM12-.LFBB4
 197               	.LM12:
 198 0030 8823      		tst r24
 199 0032 01F0      		breq .L9
  64:libRobot.cpp  **** 	      PORTB = _BV(PORTB0); //Rouge
 200               		.stabn	68,0,64,.LM13-.LFBB4
 201               	.LM13:
 202 0034 B5B9      		out 0x5,r27
 203 0036 00C0      		rjmp .L10
 204               	.L9:
  66:libRobot.cpp  **** 	      PORTB = _BV(PORTB1); //Vert
 205               		.stabn	68,0,66,.LM14-.LFBB4
 206               	.LM14:
 207 0038 A5B9      		out 0x5,r26
 208               	.L10:
 209               	.LBB26:
 210               	.LBB27:
 211               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext3
 212               	.Ltext3:
   1:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    Copyright (c) 2007 Joerg Wunsch
   3:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    All rights reserved.
   4:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
GAS LISTING /tmp/ccO8I6SS.s 			page 9


   5:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    Redistribution and use in source and binary forms, with or without
   6:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    modification, are permitted provided that the following conditions are met:
   7:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
   8:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    * Redistributions of source code must retain the above copyright
   9:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer.
  10:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  11:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    * Redistributions in binary form must reproduce the above copyright
  12:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      notice, this list of conditions and the following disclaimer in
  13:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      the documentation and/or other materials provided with the
  14:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      distribution.
  15:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  16:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****    * Neither the name of the copyright holders nor the names of
  17:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      contributors may be used to endorse or promote products derived
  18:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****      from this software without specific prior written permission.
  19:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  20:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  21:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  22:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  23:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  24:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  25:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  26:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  27:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  28:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  29:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  30:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****   POSSIBILITY OF SUCH DAMAGE. */
  31:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  32:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /* $Id: delay_basic.h 2143 2010-06-08 21:19:51Z joerg_wunsch $ */
  33:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  34:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** #ifndef _UTIL_DELAY_BASIC_H_
  35:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** #define _UTIL_DELAY_BASIC_H_ 1
  36:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  37:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** #include <inttypes.h>
  38:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  39:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** #if !defined(__DOXYGEN__)
  40:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_1(uint8_t __count) __attribute__((always_inline));
  41:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** static inline void _delay_loop_2(uint16_t __count) __attribute__((always_inline));
  42:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** #endif
  43:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  44:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /** \file */
  45:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /** \defgroup util_delay_basic <util/delay_basic.h>: Basic busy-wait delay loops
  46:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     \code
  47:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     #include <util/delay_basic.h>
  48:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     \endcode
  49:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  50:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     The functions in this header file implement simple delay loops
  51:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     that perform a busy-waiting.  They are typically used to
  52:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     facilitate short delays in the program execution.  They are
  53:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     implemented as count-down loops with a well-known CPU cycle
  54:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     count per loop iteration.  As such, no other processing can
  55:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     occur simultaneously.  It should be kept in mind that the
  56:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     functions described here do not disable interrupts.
  57:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  58:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     In general, for long delays, the use of hardware timers is
  59:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     much preferrable, as they free the CPU, and allow for
  60:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     concurrent processing of other events while the timer is
  61:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     running.  However, in particular for very short delays, the
GAS LISTING /tmp/ccO8I6SS.s 			page 10


  62:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     overhead of setting up a hardware timer is too much compared
  63:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     to the overall delay time.
  64:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  65:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     Two inline functions are provided for the actual delay algorithms.
  66:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  67:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** */
  68:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  69:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  70:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  71:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     Delay loop using an 8-bit counter \c __count, so up to 256
  72:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 256 would have to be passed
  73:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     as 0.)  The loop executes three CPU cycles per iteration, not
  74:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     including the overhead the compiler needs to setup the counter
  75:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     register.
  76:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  77:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to 768 microseconds
  78:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     can be achieved.
  79:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** */
  80:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** void
  81:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** _delay_loop_1(uint8_t __count)
  82:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** {
  83:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
  84:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		"1: dec %0" "\n\t"
  85:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
  86:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		: "=r" (__count)
  87:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
  88:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 	);
  89:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** }
  90:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  91:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** /** \ingroup util_delay_basic
  92:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  93:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     Delay loop using a 16-bit counter \c __count, so up to 65536
  94:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     iterations are possible.  (The value 65536 would have to be
  95:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     passed as 0.)  The loop executes four CPU cycles per iteration,
  96:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     not including the overhead the compiler requires to setup the
  97:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     counter register pair.
  98:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 
  99:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     Thus, at a CPU speed of 1 MHz, delays of up to about 262.1
 100:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****     milliseconds can be achieved.
 101:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h ****  */
 102:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** void
 103:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** _delay_loop_2(uint16_t __count)
 104:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** {
 105:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 	__asm__ volatile (
 106:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		"1: sbiw %0,1" "\n\t"
 107:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		"brne 1b"
 108:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		: "=w" (__count)
 109:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 		: "0" (__count)
 110:/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h **** 	);
 213               		.stabn	68,0,110,.LM15-.LFBB4
 214               	.LM15:
 215 003a F901      		movw r30,r18
 216               	/* #APP */
 217               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 218 003c 3197      		1: sbiw r30,1
 219 003e 01F4      		brne 1b
 220               	 ;  0 "" 2
GAS LISTING /tmp/ccO8I6SS.s 			page 11


 221               	/* #NOAPP */
 222               	.LBE27:
 223               	.LBE26:
 224               		.stabs	"libRobot.cpp",132,0,0,.Ltext4
 225               	.Ltext4:
  70:libRobot.cpp  **** 	  PORTB = 0x0;
 226               		.stabn	68,0,70,.LM16-.LFBB4
 227               	.LM16:
 228 0040 15B8      		out 0x5,__zero_reg__
 229               	.LBB28:
 230               	.LBB29:
 231               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext5
 232               	.Ltext5:
 233               		.stabn	68,0,110,.LM17-.LFBB4
 234               	.LM17:
 235 0042 FA01      		movw r30,r20
 236               	/* #APP */
 237               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 238 0044 3197      		1: sbiw r30,1
 239 0046 01F4      		brne 1b
 240               	 ;  0 "" 2
 241               	/* #NOAPP */
 242 0048 9150      		subi r25,lo8(-(-1))
 243               	.LBE29:
 244               	.LBE28:
 245               	.LBE25:
 246               		.stabs	"libRobot.cpp",132,0,0,.Ltext6
 247               	.Ltext6:
  58:libRobot.cpp  ****       for(uint8_t i =0; i< 3; i++)
 248               		.stabn	68,0,58,.LM18-.LFBB4
 249               	.LM18:
 250 004a 01F4      		brne .L11
 251 004c 2250      		subi r18,2
 252 004e 3109      		sbc r19,__zero_reg__
 253               	.LBE24:
  56:libRobot.cpp  ****   for(uint16_t j = 0; j< nbOperation; j++)
 254               		.stabn	68,0,56,.LM19-.LFBB4
 255               	.LM19:
 256 0050 2130      		cpi r18,1
 257 0052 3105      		cpc r19,__zero_reg__
 258 0054 01F0      		breq .L7
 259               	.L8:
 260               	.LBB31:
 261               	.LBB30:
 262               		.stabn	68,0,71,.LM20-.LFBB4
 263               	.LM20:
 264 0056 AB01      		movw r20,r22
 265 0058 421B      		sub r20,r18
 266 005a 530B      		sbc r21,r19
 267 005c 93E0      		ldi r25,lo8(3)
 268 005e 00C0      		rjmp .L11
 269               	.L7:
 270 0060 0895      		ret
 271               	.LBE30:
 272               	.LBE31:
 273               	.LBE23:
 274               	.LBE22:
GAS LISTING /tmp/ccO8I6SS.s 			page 12


 275               		.size	_ZN8LibRobot11attenuerDELEb, .-_ZN8LibRobot11attenuerDELEb
 276               	.Lscope4:
 277               		.stabs	"",36,0,0,.Lscope4-.LFBB4
 278               		.stabd	78,0,0
 279               		.stabs	"_ZN8LibRobot17tournerRoueDroiteEjji:F(0,4)",36,0,78,_ZN8LibRobot17tournerRoueDroiteEjji
 280               		.stabs	"dureeAllumee:P(0,31)",64,0,78,24
 281               		.stabs	"periode:P(0,31)",64,0,78,22
 282               		.stabs	"duree:P(0,9)",64,0,78,20
 283               	.global	_ZN8LibRobot17tournerRoueDroiteEjji
 284               		.type	_ZN8LibRobot17tournerRoueDroiteEjji, @function
 285               	_ZN8LibRobot17tournerRoueDroiteEjji:
 286               		.stabd	46,0,0
  72:libRobot.cpp  ****       }
  73:libRobot.cpp  ****     
  74:libRobot.cpp  ****   }
  75:libRobot.cpp  ****   
  76:libRobot.cpp  **** }
  77:libRobot.cpp  **** 
  78:libRobot.cpp  **** void LibRobot::tournerRoueDroite(uint16_t dureeAllumee, uint16_t periode,  int duree )
  79:libRobot.cpp  **** {
 287               		.stabn	68,0,79,.LM21-.LFBB5
 288               	.LM21:
 289               	.LFBB5:
 290 0062 CF93      		push r28
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 1 */
 294               	.L__stack_usage = 1
 295               	.LBB32:
  80:libRobot.cpp  ****     //dureeAllumee nb milliseconde allumee pour une periode (A)
  81:libRobot.cpp  ****     //periode nb milliseconde pour une periode (B)
  82:libRobot.cpp  ****     //duree nb milliseconde de roulement total
  83:libRobot.cpp  ****   
  84:libRobot.cpp  ****     /* Information sur branchements */
  85:libRobot.cpp  ****     /* Port C0 branché sur JM1+        */
  86:libRobot.cpp  ****     /* Port C1 branché sur JM1-        */
  87:libRobot.cpp  ****   
  88:libRobot.cpp  ****     DDRC = 0xff; // PORT B est en mode sortie.
 296               		.stabn	68,0,88,.LM22-.LFBB5
 297               	.LM22:
 298 0064 2FEF      		ldi r18,lo8(-1)
 299 0066 27B9      		out 0x7,r18
  89:libRobot.cpp  ****     
  90:libRobot.cpp  ****     uint16_t attenteAllumee = dureeAllumee;
  91:libRobot.cpp  ****     uint16_t attenteEteint = periode - attenteAllumee;
  92:libRobot.cpp  **** 
  93:libRobot.cpp  ****     PORTC = 0x0;
 300               		.stabn	68,0,93,.LM23-.LFBB5
 301               	.LM23:
 302 0068 18B8      		out 0x8,__zero_reg__
 303               	.LBB33:
  94:libRobot.cpp  **** 
  95:libRobot.cpp  ****     int dureeCourante = 0;
  96:libRobot.cpp  ****     while(dureeCourante < duree)
  97:libRobot.cpp  ****     {
  98:libRobot.cpp  **** 	dureeCourante += periode;
  99:libRobot.cpp  **** 	for(uint8_t i =0; i< 2; i++)
GAS LISTING /tmp/ccO8I6SS.s 			page 13


 100:libRobot.cpp  **** 	{
 101:libRobot.cpp  **** 	    PORTC = _BV(PORTC0);
 102:libRobot.cpp  **** 	    _delay_loop_2((attenteAllumee<<1)+1); //Pour F_CPU 8000000UL
 304               		.stabn	68,0,102,.LM24-.LFBB5
 305               	.LM24:
 306 006a 9C01      		movw r18,r24
 307 006c 220F      		lsl r18
 308 006e 331F      		rol r19
 309 0070 2F5F      		subi r18,-1
 310 0072 3F4F      		sbci r19,-1
 311               	.LBE33:
  91:libRobot.cpp  ****     uint16_t attenteEteint = periode - attenteAllumee;
 312               		.stabn	68,0,91,.LM25-.LFBB5
 313               	.LM25:
 314 0074 FB01      		movw r30,r22
 315 0076 E81B      		sub r30,r24
 316 0078 F90B      		sbc r31,r25
 317 007a CF01      		movw r24,r30
 318               	.LBB42:
 103:libRobot.cpp  **** 	    
 104:libRobot.cpp  **** 	    PORTC = 0x0;
 105:libRobot.cpp  **** 	    _delay_loop_2((attenteEteint<<1)+1);
 319               		.stabn	68,0,105,.LM26-.LFBB5
 320               	.LM26:
 321 007c 880F      		lsl r24
 322 007e 991F      		rol r25
 323 0080 0196      		adiw r24,1
 324               	.LBE42:
  95:libRobot.cpp  ****     int dureeCourante = 0;
 325               		.stabn	68,0,95,.LM27-.LFBB5
 326               	.LM27:
 327 0082 E0E0      		ldi r30,0
 328 0084 F0E0      		ldi r31,0
 329               	.LBB43:
 101:libRobot.cpp  **** 	    PORTC = _BV(PORTC0);
 330               		.stabn	68,0,101,.LM28-.LFBB5
 331               	.LM28:
 332 0086 C1E0      		ldi r28,lo8(1)
 333               	.LBE43:
  96:libRobot.cpp  ****     while(dureeCourante < duree)
 334               		.stabn	68,0,96,.LM29-.LFBB5
 335               	.LM29:
 336 0088 00C0      		rjmp .L15
 337               	.L16:
  78:libRobot.cpp  **** void LibRobot::tournerRoueDroite(uint16_t dureeAllumee, uint16_t periode,  int duree )
 338               		.stabn	68,0,78,.LM30-.LFBB5
 339               	.LM30:
 340 008a E60F      		add r30,r22
 341 008c F71F      		adc r31,r23
 342               	.LBB44:
 101:libRobot.cpp  **** 	    PORTC = _BV(PORTC0);
 343               		.stabn	68,0,101,.LM31-.LFBB5
 344               	.LM31:
 345 008e C8B9      		out 0x8,r28
 346               	.LBB34:
 347               	.LBB35:
 348               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext7
GAS LISTING /tmp/ccO8I6SS.s 			page 14


 349               	.Ltext7:
 350               		.stabn	68,0,110,.LM32-.LFBB5
 351               	.LM32:
 352 0090 D901      		movw r26,r18
 353               	/* #APP */
 354               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 355 0092 1197      		1: sbiw r26,1
 356 0094 01F4      		brne 1b
 357               	 ;  0 "" 2
 358               	/* #NOAPP */
 359               	.LBE35:
 360               	.LBE34:
 361               		.stabs	"libRobot.cpp",132,0,0,.Ltext8
 362               	.Ltext8:
 104:libRobot.cpp  **** 	    PORTC = 0x0;
 363               		.stabn	68,0,104,.LM33-.LFBB5
 364               	.LM33:
 365 0096 18B8      		out 0x8,__zero_reg__
 366               	.LBB37:
 367               	.LBB38:
 368               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext9
 369               	.Ltext9:
 370               		.stabn	68,0,110,.LM34-.LFBB5
 371               	.LM34:
 372 0098 DC01      		movw r26,r24
 373               	/* #APP */
 374               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 375 009a 1197      		1: sbiw r26,1
 376 009c 01F4      		brne 1b
 377               	 ;  0 "" 2
 378               	/* #NOAPP */
 379               	.LBE38:
 380               	.LBE37:
 381               		.stabs	"libRobot.cpp",132,0,0,.Ltext10
 382               	.Ltext10:
 101:libRobot.cpp  **** 	    PORTC = _BV(PORTC0);
 383               		.stabn	68,0,101,.LM35-.LFBB5
 384               	.LM35:
 385 009e C8B9      		out 0x8,r28
 386               	.LBB40:
 387               	.LBB36:
 388               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext11
 389               	.Ltext11:
 390               		.stabn	68,0,110,.LM36-.LFBB5
 391               	.LM36:
 392 00a0 D901      		movw r26,r18
 393               	/* #APP */
 394               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 395 00a2 1197      		1: sbiw r26,1
 396 00a4 01F4      		brne 1b
 397               	 ;  0 "" 2
 398               	/* #NOAPP */
 399               	.LBE36:
 400               	.LBE40:
 401               		.stabs	"libRobot.cpp",132,0,0,.Ltext12
 402               	.Ltext12:
 104:libRobot.cpp  **** 	    PORTC = 0x0;
GAS LISTING /tmp/ccO8I6SS.s 			page 15


 403               		.stabn	68,0,104,.LM37-.LFBB5
 404               	.LM37:
 405 00a6 18B8      		out 0x8,__zero_reg__
 406               	.LBB41:
 407               	.LBB39:
 408               		.stabs	"/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h",132,0,0,.Ltext13
 409               	.Ltext13:
 410               		.stabn	68,0,110,.LM38-.LFBB5
 411               	.LM38:
 412 00a8 DC01      		movw r26,r24
 413               	/* #APP */
 414               	 ;  110 "/usr/lib/gcc/avr/4.7.3/../../../../avr/include/util/delay_basic.h" 1
 415 00aa 1197      		1: sbiw r26,1
 416 00ac 01F4      		brne 1b
 417               	 ;  0 "" 2
 418               	/* #NOAPP */
 419               	.L15:
 420               	.LBE39:
 421               	.LBE41:
 422               	.LBE44:
 423               		.stabs	"libRobot.cpp",132,0,0,.Ltext14
 424               	.Ltext14:
  96:libRobot.cpp  ****     while(dureeCourante < duree)
 425               		.stabn	68,0,96,.LM39-.LFBB5
 426               	.LM39:
 427 00ae E417      		cp r30,r20
 428 00b0 F507      		cpc r31,r21
 429 00b2 04F0      		brlt .L16
 430               	/* epilogue start */
 431               	.LBE32:
 106:libRobot.cpp  **** 	}
 107:libRobot.cpp  ****     }
 108:libRobot.cpp  **** }
 432               		.stabn	68,0,108,.LM40-.LFBB5
 433               	.LM40:
 434 00b4 CF91      		pop r28
 435 00b6 0895      		ret
 436               		.size	_ZN8LibRobot17tournerRoueDroiteEjji, .-_ZN8LibRobot17tournerRoueDroiteEjji
 437               		.stabs	"dureeCourante:r(0,9)",64,0,95,30
 438               		.stabn	192,0,0,.LBB32-.LFBB5
 439               		.stabn	224,0,0,.LBE32-.LFBB5
 440               	.Lscope5:
 441               		.stabs	"",36,0,0,.Lscope5-.LFBB5
 442               		.stabd	78,0,0
 443               		.stabs	"",100,0,0,.Letext0
 444               	.Letext0:
 445               		.ident	"GCC: (Fedora 4.7.3-0.1.fc19) 4.7.3 20130216 (prerelease)"
GAS LISTING /tmp/ccO8I6SS.s 			page 16


DEFINED SYMBOLS
                            *ABS*:0000000000000000 libRobot.cpp
     /tmp/ccO8I6SS.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccO8I6SS.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccO8I6SS.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccO8I6SS.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccO8I6SS.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccO8I6SS.s:79     .text:0000000000000000 _ZN8LibRobotC2Ev
     /tmp/ccO8I6SS.s:79     .text:0000000000000000 _ZN8LibRobotC1Ev
     /tmp/ccO8I6SS.s:99     .text:0000000000000002 _ZN8LibRobotD2Ev
     /tmp/ccO8I6SS.s:99     .text:0000000000000002 _ZN8LibRobotD1Ev
     /tmp/ccO8I6SS.s:118    .text:0000000000000004 _ZN8LibRobot16BoutonEstEnfonceEv
     /tmp/ccO8I6SS.s:169    .text:0000000000000022 _ZN8LibRobot11attenuerDELEb
     /tmp/ccO8I6SS.s:285    .text:0000000000000062 _ZN8LibRobot17tournerRoueDroiteEjji

NO UNDEFINED SYMBOLS
